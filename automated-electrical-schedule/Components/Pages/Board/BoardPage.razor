@page "/board/{BoardId:int}"
@using automated_electrical_schedule.Data.Validators
@using Microsoft.EntityFrameworkCore
@layout MainLayout
@inject DatabaseContext DatabaseContext

@if (_distributionBoard is null)
{
    <main class="board-page-loading">
        <Spinner />
    </main>
}
else
{
    <main class="board-page">
        <header>
            <div class="header-text">
                <BoardBreadcrumbs DistributionBoard="_distributionBoard"/>
                <h3>@_distributionBoard.BoardName</h3>
            </div>

            <div class="header-controls">
                @if (((IElectricalComponent)_distributionBoard).HasHighVoltageDrop)
                {
                    <button class="btn-text btn-primary" @onclick="OpenVoltageDropCorrectionModal">
                        Correct Voltage Drop
                    </button>
                }            
                
                <button class="btn-text btn-primary" @onclick="OpenSummaryModal">
                    View Summary
                </button>

                <button class="btn-text btn-primary" @onclick="OpenCreateBoardModal">
                    Add Sub Distribution Board
                </button>

                <button class="btn-text btn-primary" @onclick="OpenCreateCircuitModal">
                    Add New Circuit
                </button>

                @if (_distributionBoard is ThreePhaseDistributionBoard)
                {
                    var toBeBalancedCircuitsCount = _distributionBoard
                        .Circuits
                        .OfType<NonSpaceCircuit>()
                        .Count(circuit =>
                            (circuit.LineToLineVoltage == LineToLineVoltage.A
                             || circuit.LineToLineVoltage == LineToLineVoltage.B
                             || circuit.LineToLineVoltage == LineToLineVoltage.C) &&
                            circuit.Voltage == 230);

                    <button class="btn-text btn-primary" @onclick="BalanceLoads" disabled="@(toBeBalancedCircuitsCount < 2)">
                        Balance Loads
                    </button>
                }

                @if (_distributionBoard.SetCount > 1)
                {
                    <button class="btn-text btn-secondary" @onclick="ResetSetCount">
                        Reset Sets
                    </button>
                }

                <GenericTooltipWrapper
                    Title="Edit"
                    Description="Modify distribution board"
                    Placement="TooltipPlacement.BottomLeft">
                    <button class="btn-icon btn-secondary" @onclick="OpenEditBoardModal">
                        <svg class="icon-md" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                            <path
                                fill="currentColor"
                                d="M17.181 2.927a2.975 2.975 0 0 0-4.259-.054l-9.375 9.375a2.44 2.44 0 0 0-.656 1.194l-.877 3.95a.5.5 0 0 0 .596.597l3.927-.873a2.5 2.5 0 0 0 1.234-.678l9.358-9.358a2.975 2.975 0 0 0 .052-4.153m-3.552.653a1.975 1.975 0 1 1 2.793 2.793l-.671.671l-2.793-2.792zm-1.378 1.38l2.793 2.792l-7.98 7.98a1.5 1.5 0 0 1-.744.409l-3.16.702l.708-3.183c.059-.267.193-.511.386-.704z"/>
                        </svg>
                    </button>
                </GenericTooltipWrapper>

                <GenericTooltipWrapper
                    Title="Delete"
                    Description="Remove distribution board"
                    Placement="TooltipPlacement.BottomLeft">
                    <button class="btn-icon btn-destructive" @onclick="OpenDeleteBoardModal">
                        <svg class="icon-md" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                            <path
                                fill="currentColor"
                                d="M8.5 4h3a1.5 1.5 0 0 0-3 0m-1 0a2.5 2.5 0 0 1 5 0h5a.5.5 0 0 1 0 1h-1.054l-1.194 10.344A3 3 0 0 1 12.272 18H7.728a3 3 0 0 1-2.98-2.656L3.554 5H2.5a.5.5 0 0 1 0-1zM5.741 15.23A2 2 0 0 0 7.728 17h4.544a2 2 0 0 0 1.987-1.77L15.439 5H4.561zM8.5 7.5A.5.5 0 0 1 9 8v6a.5.5 0 0 1-1 0V8a.5.5 0 0 1 .5-.5M12 8a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                        </svg>
                    </button>
                </GenericTooltipWrapper>
            </div>
        </header>

        <div class="board-content">
            <BoardSpecs DistributionBoard="_distributionBoard"/>

            <div class="board-content-main">
                <BoardTableCard DistributionBoard="_distributionBoard" OnBoardChange="RefreshBoard"/>
                <BoardSizeCards DistributionBoard="_distributionBoard" OnBoardUpdate="RefreshBoard"/>
            </div>
            @* <div class="board-content-main"> *@
            @*     <BoardSizeCard DistributionBoard="_distributionBoard"/> *@
            @* </div> *@
        </div>
    </main>
}

@if (_isEditBoardModalOpen)
{
    <CreateOrEditBoardModal @bind-IsOpen="@_isEditBoardModalOpen" DistributionBoard="@_distributionBoard"/>
}

@if (_isDeleteBoardModalOpen)
{
    <DeleteBoardModal 
        @bind-IsOpen="@_isDeleteBoardModalOpen" 
        DistributionBoard="@_distributionBoard" 
        OnBoardDelete="ClearBoard"/>
}

@if (_isCreateCircuitModalOpen)
{
    <CreateOrEditCircuitModal
        @bind-IsOpen="@_isCreateCircuitModalOpen"
        DistributionBoard="@_distributionBoard"
        OnCircuitCreateOrEdit="RefreshBoard"/>
}

@if (_isCreateBoardModalOpen)
{
    <CreateOrEditBoardModal @bind-IsOpen="@_isCreateBoardModalOpen" DistributionBoard="@_distributionBoard" IsNew="true"/>
}

@if (_isSummaryModalOpen)
{
    <SummaryModal @bind-IsOpen="@_isSummaryModalOpen" DistributionBoard="@_distributionBoard"/>
}

@if (_isVoltageDropCorrectionModalOpen)
{
    <VoltageDropCorrectionModal 
        @bind-IsOpen="_isVoltageDropCorrectionModalOpen"
        ElectricalComponent="_distributionBoard"
        OnVoltageCorrection="RefreshBoard"/>
}

@code {
    [Parameter] public int BoardId { get; set; }
    DistributionBoard? _distributionBoard;
    
    private bool _isEditBoardModalOpen;
    private bool _isDeleteBoardModalOpen;
    private bool _isCreateCircuitModalOpen;
    private bool _isCreateBoardModalOpen;
    private bool _isSummaryModalOpen;
    private bool _isVoltageDropCorrectionModalOpen;
    
    void OpenEditBoardModal() { _isEditBoardModalOpen = true; }

    void OpenDeleteBoardModal() { _isDeleteBoardModalOpen = true; }

    void OpenCreateCircuitModal() { _isCreateCircuitModalOpen = true; }

    void OpenCreateBoardModal() { _isCreateBoardModalOpen = true; }
    
    void OpenSummaryModal() { _isSummaryModalOpen = true; }
    
    void OpenVoltageDropCorrectionModal() { _isVoltageDropCorrectionModalOpen = true; }

    async Task BalanceLoads()
    {
        if (_distributionBoard is not ThreePhaseDistributionBoard threePhaseBoard) return;
        
        threePhaseBoard.BalanceLoads();
        StateHasChanged();
        await DatabaseContext.SaveChangesAsync();
    }

    async Task ResetSetCount()
    {
        _distributionBoard!.SetCount = 1;
        StateHasChanged();
        await DatabaseContext.SaveChangesAsync();
    }

    async Task RefreshBoard()
    {
        _distributionBoard = await GetCompleteDistributionBoard(BoardId);
        _distributionBoard.UpdateVoltageDropCorrectionConductorSize();
        DatabaseContext.Update(_distributionBoard);
        await DatabaseContext.SaveChangesAsync();
        StateHasChanged();
    }

    void ClearBoard()
    {
        _distributionBoard = null;
    }

    async Task LoadSubDistributionBoardsRecursively(DistributionBoard board)
    {
        foreach (var subBoard in board.SubDistributionBoards)
        {
            await DatabaseContext
                .Entry(subBoard)
                .Reference(b => b.ParentDistributionBoard)
                .LoadAsync();
            
            await DatabaseContext
                .Entry(subBoard)
                .Collection(b => b.Circuits)
                .LoadAsync();

            foreach (var circuit in subBoard.Circuits)
            {
                if (circuit is ApplianceEquipmentOutletCircuit ac)
                {
                    await DatabaseContext
                        .Entry(ac)
                        .Collection(c => c.Fixtures)
                        .LoadAsync();
                }
                else if (circuit is LightingOutletCircuit lc)
                {
                    await DatabaseContext
                        .Entry(lc)
                        .Collection(c => c.Fixtures)
                        .LoadAsync();
                }
            }
            
            await DatabaseContext
                .Entry(subBoard)
                .Collection(b => b.SubDistributionBoards)
                .LoadAsync();

            if (subBoard.SubDistributionBoards.Count > 0)
            {
                await LoadSubDistributionBoardsRecursively(subBoard);
            }
        }
    }

    async Task<DistributionBoard> GetCompleteDistributionBoard(int boardId)
    {
        var board = await DatabaseContext.DistributionBoards
            .Include(b => b.ParentDistributionBoard)
            .Include(b => b.Circuits)
                .ThenInclude(c => ((ApplianceEquipmentOutletCircuit) c).Fixtures)
            .Include(b => b.Circuits)
                .ThenInclude(c => ((LightingOutletCircuit) c).Fixtures)
            .Include(b => b.SubDistributionBoards)
            .SingleAsync(b => b.Id == boardId);
        
        await LoadSubDistributionBoardsRecursively(board);
        return board;
    }
    
    protected override async Task OnParametersSetAsync()
    {
        _distributionBoard = await GetCompleteDistributionBoard(BoardId);
    }
}