@inject DatabaseContext DatabaseContext

<div class="board-size-cards">
    <div class="board-size-card">
        <label>Size of Circuit Protection</label>

        @if (DistributionBoard.AmpereTrip.HasError)
        {
            <p>@(DistributionBoard.AmpereTrip.ErrorMessage)</p>
        }
        else if (DistributionBoard.AmpereFrame.HasError)
        {
            <p>@(DistributionBoard.AmpereFrame.ErrorMessage)</p>
        }
        else if (DistributionBoard.AmpereTrip.Value == 0 || DistributionBoard.AmpereFrame.Value == 0)
        {
            <p>Board has no circuits.</p>
        }
        else
        {
            <ul class="board-size-content">
                <li>Use @(DistributionBoard.AmpereTrip) Ampere Trip, @(DistributionBoard.AmpereFrame) Ampere Frame, @(DistributionBoard.Pole)-Pole, @(DistributionBoard.CircuitProtection.GetDisplayName())</li>
            </ul>
        }
    </div>

    <div class="board-size-card">
        <label>Size of Wire</label>

        @if (DistributionBoard.ConductorSize.HasError) 
        {
            if (DistributionBoard.ConductorSize.ErrorType == CalculationErrorType.NoFittingAmpereTripForConductorSize)
            {
                <FormWarning
                    WarningMessage="There is no possible conductor/grounding size that can accommodate the ampere trip. Adjust the number of sets to fix this."
                    WarningAction="@(() => AdjustSetCountForSizes())"
                    WarningActionText="Adjust Number of Sets"/>
            }
            else
            {
                <p>@(DistributionBoard.ConductorSize.ErrorMessage)</p>
            }
        }
        else if (DistributionBoard.GroundingSize.HasError)
        {
            <p>@DistributionBoard.GroundingSize.ErrorMessage</p>
        }
        else if (DistributionBoard.RacewaySize.HasError)
        {
            @if (DistributionBoard.RacewaySize.ErrorType == CalculationErrorType.NoFittingRacewaySize)
            {
                <FormWarning
                    WarningMessage="There is no possible raceway size that can accommodate the number of wires. Converting the raceway wire type to Cable Tray is recommended."
                    WarningAction="@(() => ConvertToCableTray())"
                    WarningActionText="Convert to Cable Tray"/>
            }
            <p>@DistributionBoard.RacewaySize.ErrorMessage</p>
        }
        else if (DistributionBoard.ConductorSize.Value == 0 || DistributionBoard.GroundingSize.Value == 0 || DistributionBoard.RacewaySize.Value == 0)
        {
            <p>Board has no circuits.</p>
        }
        else
        {
            <ul class="board-size-content">
                <li>Use @(DistributionBoard.SetCount) set@(DistributionBoard.SetCount > 1 ? "s" : "") of @(DistributionBoard.ConductorWireCount)-@(DistributionBoard.ConductorSize)mm² @(DistributionBoard.ConductorType.ToString()) and @(DistributionBoard.GroundingWireCount)-@(DistributionBoard.GroundingSize)mm² @(DistributionBoard.Grounding.ToString())</li>
                <li>Use @(DistributionBoard.RacewaySize)mm ø @(DistributionBoard.RacewayType.GetDisplayName())</li>
            </ul>
        }
    </div>

    @if (DistributionBoard.HasTransformer)
    {
        <div class="board-size-card">
            <label>Transformer</label>

            @if (DistributionBoard.TransformerRating.HasError)
            {
                <p>@(DistributionBoard.TransformerRating.ErrorMessage)</p>
            }
            else if (DistributionBoard.TransformerPrimaryProtectionAmpereTrip.HasError)
            {
                <p>@(DistributionBoard.TransformerPrimaryProtectionAmpereTrip.ErrorMessage)</p>
            }
            else if (DistributionBoard.TransformerSecondaryProtectionAmpereTrip.HasError)
            {
                <p>@(DistributionBoard.TransformerSecondaryProtectionAmpereTrip.ErrorMessage)</p>
            }
            else if (DistributionBoard.TransformerRating.Value == 0)
            {
                <p>Board has no circuits.</p>
            }
            else
            {
                <ul class="board-size-content">
                    <li>@(DistributionBoard.TransformerRating.Value / 1000)kVA</li>
                    <li>Primary Protection: @(DistributionBoard.TransformerPrimaryProtectionAmpereTrip)A @(DistributionBoard.TransformerPrimaryProtection!.GetDisplayName())</li>
                    <li>Secondary Protection: @(DistributionBoard.TransformerSecondaryProtectionAmpereTrip)A @(DistributionBoard.TransformerSecondaryProtection!.GetDisplayName())</li>
                </ul>
            }
        </div>
    }
</div>

@code {
    [Parameter] public DistributionBoard DistributionBoard { get; set; } = default!;

    [Parameter] public EventCallback OnBoardUpdate { get; set; }
    
    async Task AdjustSetCountForSizes()
    {
        DistributionBoard.AdjustSetCountForSizes();
        DatabaseContext.Update(DistributionBoard);
        StateHasChanged();
        await DatabaseContext.SaveChangesAsync();
        await OnBoardUpdate.InvokeAsync();
    }
    
    async Task ConvertToCableTray()
    {
        DistributionBoard.RacewayType = RacewayType.CableTray;
        DatabaseContext.Update(DistributionBoard);
        StateHasChanged();
        await DatabaseContext.SaveChangesAsync();
        await OnBoardUpdate.InvokeAsync();
    }

}