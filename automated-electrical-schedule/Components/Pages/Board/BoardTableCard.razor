@using System.Globalization
@inject DatabaseContext DatabaseContext
@inject NavigationManager Navigation

<div class="board-table-card">
@{
    var threePhaseBoard = DistributionBoard as ThreePhaseDistributionBoard;
}

<div class="board-table">
<div class="board-table-head">
    <p class="cell cell--text cell--sticky cell--sticky--left">No.</p>
    <p class="cell cell--text">Type</p>
    <p class="cell cell--text">Load Description</p>
    <p class="cell cell--text">Qty</p>
    <p class="cell cell--text">VA</p>
    <p class="cell cell--text">Voltage</p>

    @if (DistributionBoard.LineToLineVoltage is LineToLineVoltage.None)
    {
        <p class="cell cell--text cell--load">Ampere Load</p>
    }
    else
    {
        <div class="cell cell--separator"></div>

        @if (threePhaseBoard is not null)
        {
            <div class="board-table-head-colgroup board-table-head-colgroup--load board-table-head-colgroup--load--three-phase">
                <p class="cell cell--text board-table-head-colgroup-title">Ampere Load</p>

                <div class="board-table-head-colgroup-cols">
                    <p class="cell cell--text">@(threePhaseBoard.ThreePhaseConfiguration == ThreePhaseConfiguration.Delta ? "AB" : "AN")</p>
                    <p class="cell cell--text">@(threePhaseBoard.ThreePhaseConfiguration == ThreePhaseConfiguration.Delta ? "BC" : "BN")</p>
                    <p class="cell cell--text">@(threePhaseBoard.ThreePhaseConfiguration == ThreePhaseConfiguration.Delta ? "CA" : "CN")</p>
                    <p class="cell cell--text">ABC</p>
                </div>
            </div>
        }
        else
        {
            <div class="board-table-head-colgroup board-table-head-colgroup--load board-table-head-colgroup--load--single-phase">
                <p class="cell cell--text board-table-head-colgroup-title">Ampere Load</p>

                <div class="board-table-head-colgroup-cols">
                    <p class="cell cell--text">
                        @* TODO: Fix this later *@
                        @* @(((LineToLineVoltage)DistributionBoard.LineToLineVoltage).GetDisplayName(ThreePhaseConfiguration.Delta)) *@
                        @* @(((LineToLineVoltage)DistributionBoard.LineToLineVoltage).GetDisplayName(((ThreePhaseDistributionBoard)DistributionBoard.ParentDistributionBoard).ThreePhaseConfiguration)) *@
                        @(DistributionBoard.LineToLineVoltageDisplay)
                    </p>
                </div>
            </div>
        }
    }

    <div class="cell cell--separator"></div>

    <div class="board-table-head-colgroup board-table-head-colgroup--circuit-protection">
        <p class="cell cell--text board-table-head-colgroup-title">Circuit Protection</p>

        <div class="board-table-head-colgroup-cols">
            <p class="cell cell--text">AT</p>
            <p class="cell cell--text">AF</p>
            <p class="cell cell--text">Phase</p>
            <p class="cell cell--text">Pole</p>
            <p class="cell cell--text">Length</p>
            <p class="cell cell--text">VD</p>
            <p class="cell cell--text">Type</p>
        </div>
    </div>

    <div class="cell cell--separator"></div>

    <div class="board-table-head-colgroup board-table-head-colgroup--conductor-size">
        <p class="cell cell--text board-table-head-colgroup-title">Conductor Size</p>

        <div class="board-table-head-colgroup-cols">
            <p class="cell cell--text cell--head">Sets</p>
            <p class="cell cell--text cell--head">@(DistributionBoard.ConductorHeaderDisplay)</p>
            <p class="cell cell--text cell--head">Ground</p>
            <p class="cell cell--text cell--head">Raceway</p>
            <p class="cell cell--text cell--head">No. of Wires</p>
        </div>
    </div>

    <div class="cell cell--separator"></div>

    <div class="cell cell--buttongroup cell--sticky cell--sticky--right"></div>
</div>

@if (_circuitsAndSubBoards.Count > 0)
{
    <div class="board-table-rows">
        @foreach (var electricalComponent in _circuitsAndSubBoards)
        {
            @switch (electricalComponent)
            {
                case Circuit circuit:
                    var fixtureCircuit = circuit as FixtureCircuit;
                    var lightingCircuit = circuit as LightingOutletCircuit;
                    var motorCircuit = circuit as MotorOutletCircuit;
                    var applianceCircuit = circuit as ApplianceEquipmentOutletCircuit;
                    var convenienceCircuit = circuit as ConvenienceOutletCircuit;
                    var spaceCircuit = circuit as SpaceCircuit;
                    var nonSpaceCircuit = circuit as NonSpaceCircuit;
                    var spareCircuit = circuit as SpareCircuit;
                    var nonSpareCircuit = circuit as NonSpareCircuit;

                    var description = circuit switch
                    {
                        IDescribed describedCircuit => describedCircuit.Description,
                        SpaceCircuit => "Space",
                        SpareCircuit => "Spare",
                        _ => ""
                    };

                    <div class="board-table-row">
                        <div class="cell cell--group cell--sticky cell--sticky--left">
                            <span>@(circuit.Order)</span>
                            <OrderButtons 
                                ParentBoard="DistributionBoard" 
                                Order="circuit.Order"
                                OnBoardChange="OnBoardChange" />
                        </div>
                        
                        @if (nonSpareCircuit is not null)
                        {
                            var circuitTypeLabel = "Sub";
                            var circuitTypeLabelClass = "circuit-type-label--sub";

                            switch (circuit)
                            {
                                case LightingOutletCircuit:
                                    circuitTypeLabel = "L";
                                    circuitTypeLabelClass = "circuit-type-label--lighting";
                                    break;
                                case MotorOutletCircuit:
                                    circuitTypeLabel = "M";
                                    circuitTypeLabelClass = "circuit-type-label--motor";
                                    break;
                                case ConvenienceOutletCircuit:
                                    circuitTypeLabel = "C";
                                    circuitTypeLabelClass = "circuit-type-label--convenience";
                                    break;
                                case ApplianceEquipmentOutletCircuit:
                                    circuitTypeLabel = "A/E";
                                    circuitTypeLabelClass = "circuit-type-label--appliance";
                                    break;
                            }
                            
                            <div
                                class="cell cell--group cell--info">
                                <span class="@("circuit-type-label " + circuitTypeLabelClass)">@circuitTypeLabel</span>
                                <InfoButton OnClick="() => OpenInformationArea(Information.GenerateCircuitTypeInfo(circuit.CircuitType))"/>
                            </div>
                        }
                        else
                        {
                            <div class="cell cell--empty"></div>
                        }
                        
                        <p class="cell cell--text">@description</p>

                        @if ((fixtureCircuit?.IsItemized ?? false) || convenienceCircuit != null)
                        {
                            <div class="cell cell--separator"></div>
                        }
                        else
                        {
                            <div class="cell cell--group cell--info">
                                @if (fixtureCircuit != null)
                                {
                                    <p>@(fixtureCircuit.Fixtures[0].Quantity)</p>
                                }
                                else if (nonSpaceCircuit is not null)
                                {
                                    <p>1</p>
                                }

                                <InfoButton OnClick="() => OpenInformationArea(Information.Quantity)"/>
                            </div>
                        }
                        
                        @if (nonSpaceCircuit is not null)
                        {
                            @if (spareCircuit is not null)
                            {
                                <div class="cell cell--group cell--info">
                                    <p>@(spareCircuit.VoltAmpere.ToRoundedString())</p>
                                    <InfoButton OnClick="() => OpenInformationArea(Information.GenerateVoltAmpereInfo(circuit.CircuitType))"/>
                                </div>
                            }
                            else if (nonSpareCircuit is not null)
                            {
                                <div class="@("cell cell--group cell--info " + (nonSpareCircuit.VoltAmpere.HasError ? "cell--error" : ""))">
                                    <p>@(nonSpareCircuit.VoltAmpere.HasError ? nonSpareCircuit.VoltAmpere.ErrorMessage : nonSpareCircuit.VoltAmpere.Value.ToRoundedString())</p>
                                    <InfoButton OnClick="() => OpenInformationArea(Information.GenerateVoltAmpereInfo(circuit.CircuitType))"/>
                                </div>
                            }
                            
                            <div class="cell cell--group cell--info">
                                <p>@nonSpaceCircuit.Voltage</p>
                                <InfoButton OnClick="() => OpenInformationArea(Information.GenerateVoltageInfo(nonSpaceCircuit.Phase))"/>
                            </div>
                            
                            var ampereLoadDisplay = nonSpaceCircuit.AmpereLoad.HasError
                                ? nonSpaceCircuit.AmpereLoad.ErrorMessage
                                : nonSpaceCircuit.AmpereLoad.Value.ToRoundedString();
                            
                            if (DistributionBoard.LineToLineVoltage is LineToLineVoltage.None)
                            {
                                <div class="@("cell cell--group cell--info cell--load cell--load--no-line " + (nonSpaceCircuit.AmpereLoad.HasError ? "cell--error" : ""))">
                                    <p>@ampereLoadDisplay</p>
                                    <InfoButton OnClick="() => OpenInformationArea(Information.GenerateAmpereLoadInfo(circuit.CircuitType, circuit.LineToLineVoltage))"/>
                                </div>
                            }
                            else
                            {
                                <div class="cell cell--separator"></div>

                                if (DistributionBoard.LineToLineVoltage == LineToLineVoltage.Abc)
                                {
                                    if (circuit.LineToLineVoltage == LineToLineVoltage.A)
                                    {
                                        <div class="@("cell cell--group cell--info cell--load " + (nonSpaceCircuit.AmpereLoad.HasError ? "cell--error" : ""))">
                                            <p>@ampereLoadDisplay</p>
                                            <InfoButton OnClick="() => OpenInformationArea(Information.GenerateAmpereLoadInfo(nonSpaceCircuit.CircuitType, LineToLineVoltage.A))"/>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="cell cell--empty"></div>
                                    }

                                    if (nonSpaceCircuit.LineToLineVoltage == LineToLineVoltage.B)
                                    {
                                        <div class="@("cell cell--group cell--info cell--load " + (nonSpaceCircuit.AmpereLoad.HasError ? "cell--error" : ""))">
                                            <p>@ampereLoadDisplay</p>
                                            <InfoButton OnClick="() => OpenInformationArea(Information.GenerateAmpereLoadInfo(nonSpaceCircuit.CircuitType, LineToLineVoltage.B))"/>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="cell cell--empty"></div>
                                    }

                                    if (nonSpaceCircuit.LineToLineVoltage == LineToLineVoltage.C)
                                    {
                                        <div class="@("cell cell--group cell--info cell--load " + (nonSpaceCircuit.AmpereLoad.HasError ? "cell--error" : ""))">
                                            <p>@ampereLoadDisplay</p>
                                            <InfoButton OnClick="() => OpenInformationArea(Information.GenerateAmpereLoadInfo(nonSpaceCircuit.CircuitType, LineToLineVoltage.C))"/>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="cell cell--empty"></div>
                                    }

                                    if (nonSpaceCircuit.LineToLineVoltage == LineToLineVoltage.Abc)
                                    {
                                        <div class="@("cell cell--group cell--info cell--load " + (nonSpaceCircuit.AmpereLoad.HasError ? "cell--error" : ""))">
                                            <p>@ampereLoadDisplay</p>
                                            <InfoButton OnClick="() => OpenInformationArea(Information.GenerateAmpereLoadInfo(nonSpaceCircuit.CircuitType, LineToLineVoltage.Abc))"/>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="cell cell--empty"></div>
                                    }
                                }
                                else
                                {
                                    <div class="@("cell cell--group cell--info cell--load cell--load--line " + (nonSpaceCircuit.AmpereLoad.HasError ? "cell--error" : ""))">
                                        <p>@ampereLoadDisplay</p>
                                        <InfoButton OnClick="() => OpenInformationArea(Information.GenerateAmpereLoadInfo(nonSpaceCircuit.CircuitType, nonSpaceCircuit.LineToLineVoltage))"/>
                                    </div>
                                }
                            }
                            
                            <div class="cell cell--separator"></div>
                            
                            <div class="@("cell cell--group cell--info " + (nonSpaceCircuit.AmpereTrip.HasError ? "cell--error" : ""))">
                                <p>@nonSpaceCircuit.AmpereTrip</p>
                                <InfoButton OnClick="() => OpenInformationArea(Information.GenerateAmpereTripInfo(nonSpaceCircuit.CircuitType))"/>
                            </div>
                            <p class="@("cell cell--text " + (nonSpaceCircuit.AmpereFrame.HasError ? "cell--error" : ""))">@(nonSpaceCircuit.AmpereFrame)</p>
                            
                            <div class="cell cell--group cell--info">
                                <p>@nonSpaceCircuit.Phase</p>
                                <InfoButton OnClick="() => OpenInformationArea(Information.GeneratePhaseInfo(nonSpaceCircuit.Phase))"/>
                            </div>
                            <div class="cell cell--group cell--info">
                                <p>@nonSpaceCircuit.Pole</p>
                                <InfoButton OnClick="() => OpenInformationArea(Information.GeneratePoleInfo(nonSpaceCircuit.Pole))"/>
                            </div>
                            
                            <p class="cell cell--text">@nonSpaceCircuit.WireLength</p>
                            
                            var voltageDrop = nonSpaceCircuit.VoltageDrop;
                            
                            <div class="@("cell cell--group cell--info " + (voltageDrop.HasError ? "cell--error" : ""))">
                                <p>@(voltageDrop.HasError ? voltageDrop.ErrorMessage : voltageDrop.Value.ToRoundedString(true))</p>
                                <InfoButton OnClick="() => OpenInformationArea(Information.VoltageDrop)"/>
                            </div>
                            <p class="cell cell--text">@nonSpaceCircuit.CircuitProtection.GetDisplayName()</p>

                            <div class="cell cell--separator"></div>

                            <p class="cell cell--text">@nonSpaceCircuit.SetCount</p>

                            <div class="@("cell cell--group cell--info " + (nonSpaceCircuit.ConductorSize.HasError ? "cell--error" : ""))">
                                <p>@nonSpaceCircuit.ConductorTextDisplay</p>
                                <InfoButton OnClick="() => OpenInformationArea(Information.GenerateConductorInfo(nonSpaceCircuit.ConductorType.WireType))"/>
                            </div>

                            <div class="@("cell cell--group cell--info " + (nonSpaceCircuit.GroundingSize.HasError ? "cell--error" : ""))">
                                <p>@nonSpaceCircuit.GroundingTextDisplay</p>
                                <InfoButton
                                    OnClick="() => OpenInformationArea(Information.Grounding)"
                                    TooltipPlacement="TooltipPlacement.BottomLeft"/>
                            </div>

                            <div class="@("cell cell--group cell--info " + (nonSpaceCircuit.RacewaySize.HasError ? "cell--error" : ""))">
                                <p>@(nonSpaceCircuit.RacewayTextDisplay)</p>
                                <InfoButton
                                    OnClick="() => OpenInformationArea(Information.GenerateRacewayInfo(nonSpaceCircuit.RacewayType))"
                                    TooltipPlacement="TooltipPlacement.BottomLeft"/>
                            </div>

                            <p class="cell cell--text">@nonSpaceCircuit.WireCount</p>                            
                        }
                        else
                        {
                            <div class="cell cell--empty"></div>
                            <div class="cell cell--empty"></div>
                            
                            @if (DistributionBoard.LineToLineVoltage is LineToLineVoltage.None)
                            {
                                <div class="cell cell--load cell--load--no-line"></div>
                            }
                            else
                            {
                                <div class="cell cell--separator"></div>
                                
                                @if (DistributionBoard.LineToLineVoltage == LineToLineVoltage.Abc)
                                {
                                    <div class="cell cell--empty"></div>
                                    <div class="cell cell--empty"></div>
                                    <div class="cell cell--empty"></div>
                                    <div class="cell cell--empty"></div>
                                }
                                else
                                {
                                    <div class="cell cell--empty cell--load cell--load--line"></div>
                                }
                            }
                            
                            <div class="cell cell--separator"></div>
                            
                            <div class="cell cell--empty"></div>
                            <div class="cell cell--empty"></div>
                            <div class="cell cell--empty"></div>
                            <div class="cell cell--empty"></div>
                            <div class="cell cell--empty"></div>
                            <div class="cell cell--empty"></div>
                            <div class="cell cell--empty"></div>
                            
                            <div class="cell cell--separator"></div>
                            
                            <div class="cell cell--empty"></div>
                            <div class="cell cell--empty"></div>
                            <div class="cell cell--empty"></div>
                            <div class="cell cell--empty"></div>
                            <div class="cell cell--empty"></div>
                        }

                        <div class="cell cell--separator"></div>

                        <div class="cell cell--buttongroup cell--sticky cell--sticky--right">
                            <GenericTooltipWrapper
                                Title="Edit"
                                Description="Modify this circuit"
                                Placement="TooltipPlacement.Left">
                                <button
                                    class="btn-icon btn-secondary"
                                    @onclick="@(() => OpenEditCircuitModal(circuit))">
                                    <svg class="icon-md" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                        <path fill="currentColor" d="M17.181 2.927a2.975 2.975 0 0 0-4.259-.054l-9.375 9.375a2.44 2.44 0 0 0-.656 1.194l-.877 3.95a.5.5 0 0 0 .596.597l3.927-.873a2.5 2.5 0 0 0 1.234-.678l9.358-9.358a2.975 2.975 0 0 0 .052-4.153m-3.552.653a1.975 1.975 0 1 1 2.793 2.793l-.671.671l-2.793-2.792zm-1.378 1.38l2.793 2.792l-7.98 7.98a1.5 1.5 0 0 1-.744.409l-3.16.702l.708-3.183c.059-.267.193-.511.386-.704z"/>
                                    </svg>
                                </button>
                            </GenericTooltipWrapper>

                            <GenericTooltipWrapper
                                Title="Delete"
                                Description="Remove this circuit"
                                Placement="TooltipPlacement.Left">
                                <button
                                    class="btn-icon btn-destructive"
                                    @onclick="@(() => OpenDeleteCircuitModal(circuit))">
                                    <svg class="icon-md" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                        <path fill="currentColor" d="M8.5 4h3a1.5 1.5 0 0 0-3 0m-1 0a2.5 2.5 0 0 1 5 0h5a.5.5 0 0 1 0 1h-1.054l-1.194 10.344A3 3 0 0 1 12.272 18H7.728a3 3 0 0 1-2.98-2.656L3.554 5H2.5a.5.5 0 0 1 0-1zM5.741 15.23A2 2 0 0 0 7.728 17h4.544a2 2 0 0 0 1.987-1.77L15.439 5H4.561zM8.5 7.5A.5.5 0 0 1 9 8v6a.5.5 0 0 1-1 0V8a.5.5 0 0 1 .5-.5M12 8a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                                    </svg>
                                </button>
                            </GenericTooltipWrapper>
                        </div>

                        @if (fixtureCircuit?.IsItemized ?? false)
                        {
                            foreach (var fixture in fixtureCircuit.Fixtures)
                            {
                                <p class="cell cell--text cell--desc">@fixture.Description (@fixture.Wattage.ToRoundedString()) Watts)</p>
                                <p class="cell cell--text cell--qty">@fixture.Quantity</p>
                            }
                        }
                        else if (convenienceCircuit != null)
                        {
                            if (convenienceCircuit.GfciReceptacleQuantity > 0)
                            {
                                <p class="cell cell--text cell--desc">GFCI Receptacle (@(convenienceCircuit.AmpereTrip) AT)</p>
                                <p class="cell cell--text cell--qty">@convenienceCircuit.GfciReceptacleQuantity</p>
                            }

                            if (convenienceCircuit.OneGangQuantity > 0)
                            {
                                <p class="cell cell--text cell--desc">1-Gang</p>
                                <p class="cell cell--text cell--qty">@convenienceCircuit.OneGangQuantity</p>
                            }

                            if (convenienceCircuit.TwoGangQuantity > 0)
                            {
                                <p class="cell cell--text cell--desc">2-Gang</p>
                                <p class="cell cell--text cell--qty">@convenienceCircuit.TwoGangQuantity</p>
                            }

                            if (convenienceCircuit.ThreeGangQuantity > 0)
                            {
                                <p class="cell cell--text cell--desc">3-Gang</p>
                                <p class="cell cell--text cell--qty">@convenienceCircuit.ThreeGangQuantity</p>
                            }

                            if (convenienceCircuit.FourGangQuantity > 0)
                            {
                                <p class="cell cell--text cell--desc">4-Gang</p>
                                <p class="cell cell--text cell--qty">@convenienceCircuit.FourGangQuantity</p>
                            }
                        }
                    </div>
                    break;
                case DistributionBoard subDistributionBoard:
                    var subThreePhaseBoard = subDistributionBoard as ThreePhaseDistributionBoard;

                    <div class="board-table-row">
                        <div class="cell cell--group cell--sticky cell--sticky--left">
                            <span>@(subDistributionBoard.Order)</span>
                            <OrderButtons 
                                ParentBoard="DistributionBoard" 
                                Order="subDistributionBoard.Order" 
                                OnBoardChange="OnBoardChange" />
                        </div>
                        @* <p class="cell cell--group cell--sticky cell--sticky--left">@(subDistributionBoard.Order)</p> *@
                        <div class="cell cell--group">
                            <span class="circuit-type-label circuit-type-label--sub">Sub</span>
                        </div>
                        <p class="cell cell--text">@subDistributionBoard.BoardName</p>
                        <div class="cell cell--empty"></div>

                        @if (subDistributionBoard.VoltAmpere == 0)
                        {
                            <div class="cell cell--empty"></div>
                        }
                        else
                        {
                            <p class="cell cell--text">@(subDistributionBoard.VoltAmpere.ToRoundedString())</p>
                        }

                        @if ((int)DistributionBoard.Voltage > (int)subDistributionBoard.Voltage && subDistributionBoard.LineToLineVoltage == LineToLineVoltage.Abc)
                        {
                            <p class="cell cell--text">@($"{(int)DistributionBoard.Voltage}/{(int)subDistributionBoard.Voltage}")</p>
                        }
                        else if (subDistributionBoard.Voltage == BoardVoltage.V400)
                        {
                            <p class="cell cell--text">@(subDistributionBoard.Voltage.GetDisplayName())</p>
                        }
                        else
                        {
                            <p class="cell cell--text">@((int)subDistributionBoard.Voltage)</p>
                        }

                        @if (subDistributionBoard.LineToLineVoltage is LineToLineVoltage.None)
                        {
                            @if (subDistributionBoard.AmpereLoad.HasError || subDistributionBoard.AmpereLoad.Value == 0)
                            {
                                <div class="cell cell--empty cell--load cell--load--no-line"></div>
                            }
                            else
                            {
                                <p class="cell cell--text cell--load cell--load--no-line">@(subDistributionBoard.AmpereLoad.Value.ToRoundedString())</p>
                            }
                        }
                        else
                        {
                            <div class="cell cell--separator"></div>

                            if (subThreePhaseBoard != null)
                            {
                                @if (subThreePhaseBoard.AmpereLoadA == 0)
                                {
                                    <div class="cell cell--empty"></div>
                                }
                                else
                                {
                                    <p class="cell cell--text">@(subThreePhaseBoard.AmpereLoadA.ToRoundedString())</p>
                                }

                                @if (subThreePhaseBoard.AmpereLoadB == 0)
                                {
                                    <div class="cell cell--empty"></div>
                                }
                                else
                                {
                                    <p class="cell cell--text">@(subThreePhaseBoard.AmpereLoadB.ToRoundedString())</p>
                                }

                                @if (subThreePhaseBoard.AmpereLoadC == 0)
                                {
                                    <div class="cell cell--empty"></div>
                                }
                                else
                                {
                                    <p class="cell cell--text">@(subThreePhaseBoard.AmpereLoadC.ToRoundedString())</p>
                                }

                                @if (subThreePhaseBoard.AmpereLoadAbc == 0)
                                {
                                    <div class="cell cell--empty"></div>
                                }
                                else
                                {
                                    <p class="cell cell--text">@(subThreePhaseBoard.AmpereLoadAbc.ToRoundedString())</p>
                                }
                            }
                            else if (DistributionBoard is ThreePhaseDistributionBoard)
                            {
                                @if (subDistributionBoard.LineToLineVoltage == LineToLineVoltage.A && !subDistributionBoard.AmpereLoad.HasError)
                                {
                                    <p class="cell cell--text">@(subDistributionBoard.AmpereLoad.Value.ToRoundedString())</p>
                                }
                                else
                                {
                                    <div class="cell cell--empty"></div>
                                }

                                @if (subDistributionBoard.LineToLineVoltage == LineToLineVoltage.B && !subDistributionBoard.AmpereLoad.HasError)
                                {
                                    <p class="cell cell--text">@(subDistributionBoard.AmpereLoad.Value.ToRoundedString())</p>
                                }
                                else
                                {
                                    <div class="cell cell--empty"></div>
                                }

                                @if (subDistributionBoard.LineToLineVoltage == LineToLineVoltage.C && !subDistributionBoard.AmpereLoad.HasError)
                                {
                                    <p class="cell cell--text">@(subDistributionBoard.AmpereLoad.Value.ToRoundedString())</p>
                                }
                                else
                                {
                                    <div class="cell cell--empty"></div>
                                }

                                <div class="cell cell--empty"></div>
                            }
                            else
                            {
                                @if (subDistributionBoard.AmpereLoad.HasError || subDistributionBoard.AmpereLoad.Value == 0)
                                {
                                    <div class="cell cell--empty cell--load cell--load--line"></div>
                                }
                                else
                                {
                                    <p class="cell cell--text cell--load cell--load--line">@(subDistributionBoard.AmpereLoad.Value.ToRoundedString())</p>
                                }
                            }
                        }

                        <div class="cell cell--separator"></div>

                        <p class="@("cell cell--text " + (subDistributionBoard.AmpereTrip.HasError ? "cell--error" : ""))">@(subDistributionBoard.AmpereTrip)</p>
                        <p class="@("cell cell--text " + (subDistributionBoard.AmpereFrame.HasError ? "cell--error" : ""))">@(subDistributionBoard.AmpereFrame)</p>

                        <p class="cell cell--text">@(DistributionBoard.Phase == BoardPhase.SinglePhase ? 1 : 3)</p>
                        <p class="cell cell--text">@(subDistributionBoard.Pole)</p>

                        @if (subDistributionBoard.WireLength is not null)
                        {
                            <p class="cell cell--text">@subDistributionBoard.WireLength</p>
                        }
                        else
                        {
                            <div class="cell cell--empty"></div>
                        }

                        @if (subDistributionBoard.VoltageDrop.Value == 0 && !subDistributionBoard.VoltageDrop.HasError)
                        {
                            <div class="cell cell--empty"></div>
                        }
                        else
                        {
                            <div class="@("cell cell--group " + (subDistributionBoard.VoltageDrop.HasError || subDistributionBoard.VoltageDrop.Value > 0.03 ? "cell--error" : ""))">
                                <p>@(subDistributionBoard.VoltageDrop.HasError ? subDistributionBoard.VoltageDrop : subDistributionBoard.VoltageDrop.Value.ToRoundedString(true))</p>

                                @* TODO: Implement voltage drop correction for sub boards *@

                                @* <p>@(Math.Round(voltageDrop, 4).ToPercentageString())</p> *@

                                @* @if (hasHighVoltageDrop) *@
                                @* { *@
                                @* <button type="button" class="btn-text btn-destructive" @onclick="@(() => CorrectVoltageDrop(circuit))"> *@
                                @*     Correct *@
                                @* </button> *@
                                @* } *@
                            </div>
                        }


                        <p class="cell cell--text">@subDistributionBoard.CircuitProtection.GetDisplayName()</p>

                        <div class="cell cell--separator"></div>

                        <p class="cell cell--text">@subDistributionBoard.SetCount</p>

                        @if (subDistributionBoard.ConductorSize.HasError)
                        {
                            <p class="cell cell--text cell--error">@(subDistributionBoard.ConductorSize.ErrorMessage)</p>
                        }
                        else
                        {
                            <p class="cell cell--text">@(subDistributionBoard.ConductorTextDisplay)</p>
                        }

                        @if (subDistributionBoard.GroundingSize.HasError)
                        {
                            <p class="cell cell--text cell--error">@(subDistributionBoard.GroundingSize.ErrorMessage)</p>
                        }
                        else
                        {
                            <p class="cell cell--text">@(subDistributionBoard.GroundingTextDisplay)</p>
                        }

                        @if (subDistributionBoard.RacewaySize.HasError)
                        {
                            <p class="cell cell--text cell--error">@(subDistributionBoard.RacewaySize.ErrorMessage)</p>
                        }
                        else
                        {
                            <p class="cell cell--text">@(subDistributionBoard.RacewayTextDisplay)</p>
                        }

                        <p class="cell cell--text">@subDistributionBoard.WireCount</p>

                        <div class="cell cell--separator"></div>

                        <div class="cell cell--buttongroup cell--sticky cell--sticky--right">
                            <GenericTooltipWrapper
                                Title="Open"
                                Description="Access this distribution board to add, delete, or modify circuits"
                                Placement="TooltipPlacement.BottomLeft">
                                <button
                                    class="link-btn btn-icon btn-primary"
                                    @onclick="@(() => GoToSubBoardPage(subDistributionBoard.Id))">
                                    <svg class="icon-md" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                        <path fill="currentColor" d="M8.646 4.147a.5.5 0 0 1 .707-.001l5.484 5.465a.55.55 0 0 1 0 .779l-5.484 5.465a.5.5 0 0 1-.706-.708L13.812 10L8.647 4.854a.5.5 0 0 1-.001-.707m-4 0a.5.5 0 0 1 .707-.001l5.484 5.465a.55.55 0 0 1 0 .779l-5.484 5.465a.5.5 0 0 1-.706-.708L9.812 10L4.647 4.854a.5.5 0 0 1-.001-.707"/>
                                    </svg>
                                </button>
                            </GenericTooltipWrapper>
                        </div>
                    </div>
                    break;
            }
        }
    </div>
}
else
{
    <div class="board-table-empty">
        <p class="board-table-empty-text">This board has no circuits.</p>
    </div>
}

<div class="board-table-footer">
    <p class="cell cell--text cell--sticky cell--sticky--left">Total</p>
    <div class="cell cell--empty"></div>
    <div class="cell cell--empty"></div>
    <div class="cell cell--empty"></div>

    @if (DistributionBoard.VoltAmpere == 0)
    {
        <div class="cell cell--empty"></div>
    }
    else
    {
        <p class="cell cell--text">@(DistributionBoard.VoltAmpere.ToRoundedString())</p>
    }

    <div class="cell cell--empty"></div>

    @if (DistributionBoard.LineToLineVoltage is LineToLineVoltage.None)
    {
        @if (DistributionBoard.AmpereLoad.HasError || DistributionBoard.AmpereLoad.Value == 0)
        {
            <div class="cell cell--empty cell--load cell--load--no-line"></div>
        }
        else
        {
            <p class="cell cell--text cell--load cell--load--no-line">@DistributionBoard.AmpereLoad.Value.ToRoundedString()</p>
        }
    }
    else
    {
        <div class="cell cell--separator"></div>

        if (threePhaseBoard != null)
        {
            @if (threePhaseBoard.AmpereLoadA == 0)
            {
                <div class="cell cell--empty"></div>
            }
            else
            {
                <p class="cell cell--text">@threePhaseBoard.AmpereLoadA.ToRoundedString()</p>
            }

            @if (threePhaseBoard.AmpereLoadB == 0)
            {
                <div class="cell cell--empty"></div>
            }
            else
            {
                <p class="cell cell--text">@threePhaseBoard.AmpereLoadB.ToRoundedString()</p>
            }

            @if (threePhaseBoard.AmpereLoadC == 0)
            {
                <div class="cell cell--empty"></div>
            }
            else
            {
                <p class="cell cell--text">@Math.Round(threePhaseBoard.AmpereLoadC, 4)</p>
                <p class="cell cell--text">@threePhaseBoard.AmpereLoadC.ToRoundedString()</p>
            }

            @if (threePhaseBoard.AmpereLoadAbc == 0)
            {
                <div class="cell cell--empty"></div>
            }
            else
            {
                <p class="cell cell--text">@threePhaseBoard.AmpereLoadAbc.ToRoundedString()</p>
            }
        }
        else
        {
            @if (DistributionBoard.AmpereLoad.HasError || DistributionBoard.AmpereLoad.Value == 0)
            {
                <div class="cell cell--empty cell--load cell--load--line"></div>
            }
            else
            {
                <p class="cell cell--text cell--load cell--load--line">@(DistributionBoard.AmpereLoad.Value.ToRoundedString())</p>
            }
        }
    }

    <div class="cell cell--separator"></div>

    <div class="cell cell--empty"></div>
    <div class="cell cell--empty"></div>
    <div class="cell cell--empty"></div>
    <div class="cell cell--empty"></div>
    <div class="cell cell--empty"></div>

    <p class="cell cell--text">@(DistributionBoard.VoltageDrop.HasError ? DistributionBoard.VoltageDrop.ErrorMessage : DistributionBoard.VoltageDrop.Value.ToRoundedString(true))</p>

    <div class="cell cell--empty"></div>
    <div class="cell cell--empty"></div>
    <div class="cell cell--empty"></div>

    <div class="cell cell--separator"></div>

    <div class="cell cell--empty"></div>
    <div class="cell cell--empty"></div>
    <div class="cell cell--empty"></div>
    <div class="cell cell--empty"></div>
    <div class="cell cell--empty"></div>

    <div class="cell cell--separator"></div>

    <div class="cell cell--empty cell--sticky cell--sticky--right"></div>
</div>
</div>
</div>

@if (_isDeleteCircuitModalOpen)
{
    <DeleteCircuitModal @bind-IsOpen="_isDeleteCircuitModalOpen" Circuit="_circuitToDelete" OnCircuitDelete="OnBoardChange"/>
}

@if (_isEditCircuitModalOpen)
{
    <CreateOrEditCircuitModal
        @bind-IsOpen="@_isEditCircuitModalOpen"
        DistributionBoard="DistributionBoard"
        OldCircuit="@_circuitToEdit"
        OnCircuitCreateOrEdit="OnBoardChange"/>
}

@if (_isInformationAreaOpen)
{
    <InformationAreaModalSheet 
        @bind-IsOpen="@_isInformationAreaOpen"
        Information="@_information" />
}

@code {
    [Parameter] public DistributionBoard DistributionBoard { get; set; } = default!;

    // private List<Circuit> _circuits = [];
    private List<IOrdered> _circuitsAndSubBoards = [];

    [Parameter] public EventCallback OnBoardChange { get; set; }

    private bool _isDeleteCircuitModalOpen;
    private Circuit _circuitToDelete = default!;

    private bool _isEditCircuitModalOpen;
    private Circuit _circuitToEdit = default!;

    private bool _isInformationAreaOpen;
    private Information _information = default!;

    // protected override void OnInitialized()
    // {
    //     _circuits = DistributionBoard.Circuits;
    // }

    protected override void OnParametersSet()
    {
        _circuitsAndSubBoards =
            DistributionBoard.Circuits.Cast<IOrdered>()
                .Concat(DistributionBoard.SubDistributionBoards)
                .OrderBy(e => e.Order)
                .ToList();
    }

    void OpenDeleteCircuitModal(Circuit circuitToDelete)
    {
        _circuitToDelete = circuitToDelete;
        _isDeleteCircuitModalOpen = true;
    }

    void OpenEditCircuitModal(Circuit circuitToEdit)
    {
        _circuitToEdit = circuitToEdit;
        _isEditCircuitModalOpen = true;
    }
    
    void OpenInformationArea(Information information)
    {
        _information = information;
        _isInformationAreaOpen = true;
    }

    void GoToSubBoardPage(int subBoardId)
    {
        Navigation.NavigateTo($"/board/{subBoardId}");
    }
}