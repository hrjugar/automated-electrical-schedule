@page "/"
@using Microsoft.EntityFrameworkCore
@layout MainLayout
@inject DatabaseContext DatabaseContext

<main class="projects-page">
    <header>
        <div class="projects-controls">
            <ProjectsSearch Search="SearchProjects"/>
            <button class="btn-text btn-primary" @onclick="OpenModal">Add New Project</button>
        </div>
    </header>

    <div class="projects-list">
        @if (_projects.Count > 0)
        {
            @foreach (var project in _projects)
            {
                var board = project.MainDistributionBoard;
                
                string badgeConfigClass;
                string badgeText;
                if (board is ThreePhaseDistributionBoard threePhaseBoard)
                {
                    if (threePhaseBoard.ThreePhaseConfiguration == ThreePhaseConfiguration.Delta)
                    {
                        badgeConfigClass = "badge-delta";
                        badgeText = "3Φ Δ | ";
                    }
                    else
                    {
                        badgeConfigClass = "badge-wye";
                        badgeText = "3Φ Y | ";
                    }
                }
                else
                {
                    badgeConfigClass = "badge-single-phase";
                    badgeText = "1Φ | ";
                }

                badgeText += board.Voltage.GetDisplayName();
                
                <a href="/board/@project.MainDistributionBoardId" class="project">
                    <h5>@project.ProjectName</h5>
                    
                    <div class="project-descriptors">
                        <p>Last created @project.DateCreated.ToRelativeDateString()</p>
                        <span class="project-badge @badgeConfigClass">@badgeText</span>
                    </div>
                </a>
            }
        }
        else
        {
            <div class="projects-list-empty">
                <p>No projects found.</p>
            </div>
        }
    </div>
</main>

@if (_isCreateProjectModalOpen)
{
    <CreateProjectModal @bind-IsOpen="@_isCreateProjectModalOpen"/>
}


@code {
    List<Project> _projects = [];

    private bool _isCreateProjectModalOpen;

    void OpenModal()
    {
        _isCreateProjectModalOpen = true;
    }

    protected override async Task OnInitializedAsync()
    {
        _projects = await DatabaseContext.Projects
            .Include(p => p.MainDistributionBoard)
            .ToListAsync();
        _projects.Reverse();
    }

    async Task SearchProjects(string searchText)
    {
        _projects = await
            DatabaseContext.Projects
                .Where(p => p.ProjectName.Contains(searchText))
                .Include(p => p.MainDistributionBoard)
                .ToListAsync();
    }
}