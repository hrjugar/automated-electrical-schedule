@page "/"
@using Microsoft.EntityFrameworkCore
@layout MainLayout
@inject DatabaseContext DatabaseContext

<main class="projects-page">
    <header>
        <div class="projects-controls">
            <ProjectsSearch Search="SearchProjects" @bind-SearchText="_searchText"/>
            <button class="btn-text btn-primary" @onclick="OpenCreateProjectModal">Add New Project</button>
        </div>
    </header>

    <div class="projects-list">
        @if (_projects.Count > 0)
        {
            @foreach (var project in _projects)
            {
                var board = project.MainDistributionBoard;
                
                string badgeConfigClass;
                string badgeText;
                if (board is ThreePhaseDistributionBoard threePhaseBoard)
                {
                    if (threePhaseBoard.ThreePhaseConfiguration == ThreePhaseConfiguration.Delta)
                    {
                        badgeConfigClass = "badge-delta";
                        badgeText = "3Φ Δ | ";
                    }
                    else
                    {
                        badgeConfigClass = "badge-wye";
                        badgeText = "3Φ Y | ";
                    }
                }
                else
                {
                    badgeConfigClass = "badge-single-phase";
                    badgeText = "1Φ | ";
                }

                badgeText += board.Voltage.GetDisplayName();
                
                <a href="/board/@project.MainDistributionBoardId" class="project">
                    <div class="project-details">
                        <h5>@project.ProjectName</h5>

                        <div class="project-descriptors">
                            <p>Last created @project.DateCreated.ToRelativeDateString()</p>
                            <span class="project-badge @badgeConfigClass">@badgeText</span>
                            <span class="project-badge badge-building">@project.MainDistributionBoard.BuildingClassification.GetDisplayName()</span>
                        </div>
                    </div>
                    
                    <div class="project-buttons">
                        <GenericTooltipWrapper
                            Title="Edit"
                            Description="Modify project"
                            Placement="TooltipPlacement.BottomLeft">
                            <button 
                                class="btn-icon btn-secondary"
                                @onclick="@(() => OpenEditProjectModal(project))"
                                @onclick:stopPropagation="true"
                                @onclick:preventDefault="true">
                                <svg class="icon-md" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                    <path
                                        fill="currentColor"
                                        d="M17.181 2.927a2.975 2.975 0 0 0-4.259-.054l-9.375 9.375a2.44 2.44 0 0 0-.656 1.194l-.877 3.95a.5.5 0 0 0 .596.597l3.927-.873a2.5 2.5 0 0 0 1.234-.678l9.358-9.358a2.975 2.975 0 0 0 .052-4.153m-3.552.653a1.975 1.975 0 1 1 2.793 2.793l-.671.671l-2.793-2.792zm-1.378 1.38l2.793 2.792l-7.98 7.98a1.5 1.5 0 0 1-.744.409l-3.16.702l.708-3.183c.059-.267.193-.511.386-.704z"/>
                                </svg>
                            </button>
                        </GenericTooltipWrapper>

                        <GenericTooltipWrapper
                            Title="Delete"
                            Description="Remove project"
                            Placement="TooltipPlacement.BottomLeft">
                            <button 
                                class="btn-icon btn-destructive" 
                                @onclick="@(() => OpenDeleteProjectModal(project))"
                                @onclick:stopPropagation="true"
                                @onclick:preventDefault="true">
                                <svg class="icon-md" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                    <path
                                        fill="currentColor"
                                        d="M8.5 4h3a1.5 1.5 0 0 0-3 0m-1 0a2.5 2.5 0 0 1 5 0h5a.5.5 0 0 1 0 1h-1.054l-1.194 10.344A3 3 0 0 1 12.272 18H7.728a3 3 0 0 1-2.98-2.656L3.554 5H2.5a.5.5 0 0 1 0-1zM5.741 15.23A2 2 0 0 0 7.728 17h4.544a2 2 0 0 0 1.987-1.77L15.439 5H4.561zM8.5 7.5A.5.5 0 0 1 9 8v6a.5.5 0 0 1-1 0V8a.5.5 0 0 1 .5-.5M12 8a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                                </svg>
                            </button>
                        </GenericTooltipWrapper>
                    </div>
                </a>
            }
        }
        else
        {
            <div class="projects-list-empty">
                <p>No projects found.</p>
            </div>
        }
    </div>
</main>

@if (_isCreateProjectModalOpen)
{
    <CreateProjectModal @bind-IsOpen="@_isCreateProjectModalOpen"/>
}

@if (_isDeleteProjectModalOpen)
{
    <DeleteProjectModal 
        @bind-IsOpen="@_isDeleteProjectModalOpen" 
        Project="_projectToDelete"
        OnProjectDelete="SearchProjects"/>
}

@if (_isEditProjectModalOpen)
{
    <EditProjectModal 
        @bind-IsOpen="@_isEditProjectModalOpen"
        Project="_projectToEdit"/>
}


@code {
    List<Project> _projects = [];

    private string _searchText = string.Empty; 
    
    private bool _isCreateProjectModalOpen;
    
    private bool _isDeleteProjectModalOpen;
    private Project _projectToDelete = default!;
    
    private bool _isEditProjectModalOpen;
    private Project _projectToEdit = default!;

    void OpenCreateProjectModal()
    {
        _isCreateProjectModalOpen = true;
    }
    
    void OpenDeleteProjectModal(Project projectToDelete)
    {
        _projectToDelete = projectToDelete;
        _isDeleteProjectModalOpen = true;
    }
    
    void OpenEditProjectModal(Project projectToEdit)
    {
        _projectToEdit = projectToEdit;
        _isEditProjectModalOpen = true;
    }

    protected override async Task OnInitializedAsync()
    {
        _projects = await DatabaseContext.Projects
            .Include(p => p.MainDistributionBoard)
            .ThenInclude(b => b.Circuits)
            .ToListAsync();
        _projects.Reverse();
    }

    async Task SearchProjects()
    {
        _projects = await
            DatabaseContext.Projects
                .Where(p => p.ProjectName.Contains(_searchText))
                .Include(p => p.MainDistributionBoard)
                .ThenInclude(b => b.Circuits)
                .ToListAsync();
    }
}