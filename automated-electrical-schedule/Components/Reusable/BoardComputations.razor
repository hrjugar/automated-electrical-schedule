@using automated_electrical_schedule.Data.FormulaTables
<div class="computations">
    <div class="computation-group">
        <h5>A.) Application of Demand Factors</h5>
        
        @if (DistributionBoard.BuildingClassification == BuildingClassification.DwellingUnit)
        {
            var lightingAndConvenienceCircuitsVoltAmpere =
                DistributionBoard.FilterVoltAmpere<LightingOutletCircuit>() +
                DistributionBoard.FilterVoltAmpere<ConvenienceOutletCircuit>();
            
            var subBoardsWithLightingAndConvenienceCircuits =
                DistributionBoard.SubDistributionBoards.Where(
                    b => 
                        b.FilterVoltAmpere<LightingOutletCircuit>() > 0 || 
                        b.FilterVoltAmpere<ConvenienceOutletCircuit>() > 0
                );
            
            <div class="computation-subgroup">
                <h4>Lighting and Convenience Outlets</h4>
                
                @if (lightingAndConvenienceCircuitsVoltAmpere > 0)
                {
                    @foreach (var lightingCircuit in _lightingCircuits)
                    {
                        <p>- @($"{lightingCircuit.Description} = {lightingCircuit.VoltAmpere}VA")</p>
                    }
                    
                    @foreach (var convenienceCircuit in _convenienceCircuits)
                    {
                        <p>- @($"{convenienceCircuit.Description} = {convenienceCircuit.VoltAmpere}VA")</p>
                    }
                    
                    @foreach (var subBoard in subBoardsWithLightingAndConvenienceCircuits)
                    {
                        var subBoardLightingCircuitsVoltAmpere = subBoard.FilterVoltAmpere<LightingOutletCircuit>();
                        var subBoardConvenienceCircuitsVoltAmpere = subBoard.FilterVoltAmpere<ConvenienceOutletCircuit>();
                        
                        <p>- @($"Sub Total ({subBoard.BoardName}) = {(subBoardLightingCircuitsVoltAmpere + subBoardConvenienceCircuitsVoltAmpere).ToRoundedString()}")</p>
                    }
                    
                    <p class="underline">Sub Total = @(lightingAndConvenienceCircuitsVoltAmpere.ToRoundedString())VA</p>

                    var lightingAndConvenienceCircuitsVoltAmpereRanges = 
                        DemandFactorFormulas.ApplyDemandFactorToDwellingUnitLightingAndConvenienceCircuits(
                            lightingAndConvenienceCircuitsVoltAmpere
                        );
                    
                    var firstRangeValue = lightingAndConvenienceCircuitsVoltAmpereRanges[0];
                    var secondRangeValue = lightingAndConvenienceCircuitsVoltAmpereRanges[1];
                    var thirdRangeValue = lightingAndConvenienceCircuitsVoltAmpereRanges[2];
                    
                    <p>First 3000 VA @("@") 100% = @(firstRangeValue.ToRoundedString())</p>
                    
                    @if (secondRangeValue > 0)
                    {
                        <p>From 3001 to 120000 VA @@ 35% = @(secondRangeValue.ToRoundedString())</p>
                    }
                    
                    @if (thirdRangeValue > 0)
                    {
                        <p>Remainder over 120000 VA @@ 25% = @(thirdRangeValue.ToRoundedString())</p>
                    }
                    
                    <p></p>
                    <h6>Final total = @((firstRangeValue + secondRangeValue + thirdRangeValue).ToRoundedString()) VA</h6>
                    <p>Reference: Lighting load Demand Factors, Philippine Electrical Code Part 1, Chap. 2.20, no. 2.20.3.3, pp. 56, 2017.</p>
                }
                else
                {
                    <p>None</p>
                }
            </div>
        }
        else
        {
            var lightingCircuitsVoltAmpere = DistributionBoard.FilterVoltAmpere<LightingOutletCircuit>();
            
            var subBoardsWithLightingCircuits = 
                DistributionBoard.SubDistributionBoards.Where(
                    b => b.FilterVoltAmpere<ConvenienceOutletCircuit>() > 0
                );
            
            <div class="computation-subgroup">
                <h4>Lighting Outlets</h4>
                
                @if (lightingCircuitsVoltAmpere > 0)
                {
                    @foreach (var lightingCircuit in _lightingCircuits.Where(lc => !lc.VoltAmpere.HasError))
                    {
                        <p>- @($"{lightingCircuit.Description} = {lightingCircuit.VoltAmpere.Value.ToRoundedString()}VA")</p>
                    }
                    
                    @foreach (var subBoard in subBoardsWithLightingCircuits)
                    {
                        <p>- @($"Sub Total ({subBoard.BoardName}) = {subBoard.FilterVoltAmpere<LightingOutletCircuit>().ToRoundedString()}")</p>
                    }
                    
                    <p class="underline">Sub Total = @(lightingCircuitsVoltAmpere.ToRoundedString())VA</p>
                    
                    double nonDwellingLightingCircuitsVoltAmpereWithDemandFactor;
                    @if (DistributionBoard.BuildingClassification == BuildingClassification.Hospital)
                    {
                        var hospitalLightingCircuitsVoltAmpereRanges =
                            DemandFactorFormulas.ApplyDemandFactorToHospitalLightingCircuits(
                                lightingCircuitsVoltAmpere
                            );
                        var firstHospitalLightingRangeValue = hospitalLightingCircuitsVoltAmpereRanges[0];
                        var secondHospitalLightingRangeValue = hospitalLightingCircuitsVoltAmpereRanges[1];
                        
                        <p>First 50000 @@ 40% = @(firstHospitalLightingRangeValue.ToRoundedString()) VA</p>
                        
                        @if (secondHospitalLightingRangeValue > 0)
                        {
                            <p>Remainder over 50000 @@ 20% = @(secondHospitalLightingRangeValue.ToRoundedString()) VA</p>
                        }
                        
                        nonDwellingLightingCircuitsVoltAmpereWithDemandFactor = 
                            firstHospitalLightingRangeValue + secondHospitalLightingRangeValue;
                    } 
                    else if (DistributionBoard.BuildingClassification == BuildingClassification.HotelMotelApartment)
                    {
                        var hotelLightingCircuitsVoltAmpereRanges =
                            DemandFactorFormulas.ApplyDemandFactorToHotelMotelApartmentLightingCircuits(
                                lightingCircuitsVoltAmpere
                            );
                        var firstHotelLightingRangeValue = hotelLightingCircuitsVoltAmpereRanges[0];
                        var secondHotelLightingRangeValue = hotelLightingCircuitsVoltAmpereRanges[1];
                        var thirdHotelLightingRangeValue = hotelLightingCircuitsVoltAmpereRanges[2];
                        
                        <p>First 20000 @@ 50% = @(firstHotelLightingRangeValue.ToRoundedString()) VA</p>
                        
                        @if (secondHotelLightingRangeValue > 0)
                        {
                            <p>From 20001 to 100000 @@ 40% = @(secondHotelLightingRangeValue.ToRoundedString()) VA</p>
                        }
                        
                        @if (thirdHotelLightingRangeValue > 0)
                        {
                            <p>Remainder over 100000 @@ 30% = @(thirdHotelLightingRangeValue.ToRoundedString()) VA</p>
                        }
                        
                        nonDwellingLightingCircuitsVoltAmpereWithDemandFactor = 
                            firstHotelLightingRangeValue + 
                            secondHotelLightingRangeValue + 
                            thirdHotelLightingRangeValue;
                    }
                    else if (DistributionBoard.BuildingClassification == BuildingClassification.Warehouse)
                    {
                        var warehouseCircuitsVoltAmpereRanges =
                            DemandFactorFormulas.ApplyDemandFactorToWarehouseLightingCircuits(
                                lightingCircuitsVoltAmpere
                            );
                        var firstWarehouseLightingRangeValue = warehouseCircuitsVoltAmpereRanges[0];
                        var secondWarehouseLightingRangeValue = warehouseCircuitsVoltAmpereRanges[1];
                        
                        <p>First 12500 @@ 100% = @(firstWarehouseLightingRangeValue.ToRoundedString())</p>
                        
                        @if (secondWarehouseLightingRangeValue > 0)
                        {
                            <p>Remainder over 12500 @@ 50% = @(secondWarehouseLightingRangeValue.ToRoundedString())</p>
                        }

                        nonDwellingLightingCircuitsVoltAmpereWithDemandFactor =
                            firstWarehouseLightingRangeValue +
                            secondWarehouseLightingRangeValue;
                    }
                    else
                    {
                        nonDwellingLightingCircuitsVoltAmpereWithDemandFactor = lightingCircuitsVoltAmpere;
                    }
                    
                    <h6>Final total = @(nonDwellingLightingCircuitsVoltAmpereWithDemandFactor.ToRoundedString()) VA</h6>
                    <p>Reference: Lighting load Demand Factors, Philippine Electrical Code Part 1, Chap. 2.20, no. 2.20.3.3, pp. 56, 2017.</p>
                }
                else
                {
                    <p>None</p>
                }
            </div>

            var convenienceCircuitsVoltAmpere = DistributionBoard.FilterVoltAmpere<ConvenienceOutletCircuit>();
            
            var subBoardsWithConvenienceCircuits = 
                DistributionBoard.SubDistributionBoards.Where(
                    b => b.FilterVoltAmpere<ConvenienceOutletCircuit>() > 0
                );
            
            <div class="computation-subgroup">
                <h4>Convenience Outlets</h4>
                
                @if (convenienceCircuitsVoltAmpere > 0)
                {
                    @foreach (var convenienceCircuit in _convenienceCircuits.Where(cc => !cc.VoltAmpere.HasError))
                    {
                        <p>- @($"{convenienceCircuit.Description} = {convenienceCircuit.VoltAmpere.Value.ToRoundedString()}VA")</p>
                    }

                    @foreach (var subBoard in subBoardsWithConvenienceCircuits)
                    {
                        <p>- @($"Sub Total ({subBoard.BoardName}) = {subBoard.FilterVoltAmpere<ConvenienceOutletCircuit>().ToRoundedString()}")</p>
                    }
                    
                    <p class="underline">Sub Total = @(convenienceCircuitsVoltAmpere)VA</p>
                    
                    var nonDwellingConvenienceCircuitsVoltAmpereRanges =
                        DemandFactorFormulas.ApplyDemandFactorToNonDwellingConvenienceCircuits(
                            convenienceCircuitsVoltAmpere
                        );
                    var firstNonDwellingConvenienceRangeValue = nonDwellingConvenienceCircuitsVoltAmpereRanges[0];
                    var secondNonDwellingConvenienceRangeValue = nonDwellingConvenienceCircuitsVoltAmpereRanges[1];
                    
                    <p>First 10000 @@ 100% = @(firstNonDwellingConvenienceRangeValue.ToRoundedString()) VA</p>
                    
                    @if (secondNonDwellingConvenienceRangeValue > 0)
                    {
                        <p>Remainder over 10000 @@ 50% = @(secondNonDwellingConvenienceRangeValue.ToRoundedString())</p>
                    }
                    
                    <h6>Final total = @(nonDwellingConvenienceCircuitsVoltAmpereRanges.Sum().ToRoundedString()) VA</h6>
                    <p>Reference: Demand Factors for Non-Dwelling Receptacle Loads, Philippine Electrical Code Part 1, Chap. 2.20, no. 2.20.3.5, pp. 56, 2017.</p>
                }
                else
                {
                    <p>None</p>
                }
            </div>
        }
        
        @{
            var normalMotorsVoltAmpere =
                DistributionBoard.FilterVoltAmpere<MotorOutletCircuit>(
                    mc => mc.MotorApplication == MotorApplication.NormalMotor
                );
            
            var normalMotors =
                _motorCircuits.Where(mc => mc.MotorApplication == MotorApplication.NormalMotor);
            
            var subBoardsWithNormalMotors = 
                DistributionBoard.SubDistributionBoards.Where(
                    b => b.FilterVoltAmpere<MotorOutletCircuit>(
                        mc => mc.MotorApplication == MotorApplication.NormalMotor
                    ) > 0
                );
            
            var feedersVoltAmpere =
                DistributionBoard.FilterVoltAmpere<MotorOutletCircuit>(
                    mc => mc.MotorApplication == MotorApplication.ElevatorFeeder
                );
            
            var feeders =
                DistributionBoard.FilterNestedCircuits<MotorOutletCircuit>(
                    mc => mc.MotorApplication == MotorApplication.ElevatorFeeder
                );

            var feedersVoltAmpereWithDemandFactor =
                DemandFactorFormulas.ApplyDemandFactorToElevatorFeeders(feeders);
            
            var cranesAndHoistVoltAmpere =
                DistributionBoard.FilterVoltAmpere<MotorOutletCircuit>(
                    mc => mc.MotorApplication == MotorApplication.CranesAndHoist
                );

            var cranesAndHoists =
                DistributionBoard.FilterNestedCircuits<MotorOutletCircuit>(
                    mc => mc.MotorApplication == MotorApplication.CranesAndHoist
                );
            
            var cranesAndHoistsVoltAmpereWithDemandFactor =
                DemandFactorFormulas.ApplyDemandFactorToCranesAndHoists(cranesAndHoists);
        }
        
        <div class="computation-subgroup">
            <h4>Motor Outlets</h4>
            
            @if (normalMotorsVoltAmpere > 0 || feedersVoltAmpere > 0 || cranesAndHoistVoltAmpere > 0)
            {
                @if (normalMotorsVoltAmpere > 0)
                {
                    <h6>For Normal Motors:</h6>
                    
                    @foreach (var normalMotor in normalMotors.Where(nm => !nm.VoltAmpere.HasError))
                    {
                        <p>- @($"{normalMotor.Description} = {normalMotor.VoltAmpere.Value.ToRoundedString()}VA")</p>
                    }
                    
                    @foreach (var subBoard in subBoardsWithNormalMotors)
                    {
                        var subBoardNormalMotorsVoltAmpere = subBoard.FilterVoltAmpere<MotorOutletCircuit>(mc => mc.MotorApplication == MotorApplication.NormalMotor);
                        <p>- @($"Sub Total ({subBoard.BoardName}) = {subBoardNormalMotorsVoltAmpere.ToRoundedString()}")</p>
                    }
                    
                    <p class="underline">Sub Total = @(normalMotorsVoltAmpere.ToRoundedString())</p>
                    <p>No Demand Factors</p>
                }
                
                @if (feedersVoltAmpere > 0)
                {
                    <h6>For Elevator Feeders:</h6>
                    
                    @foreach (var feeder in feeders.Where(f => !f.VoltAmpere.HasError))
                    {
                        <p>- @($"{feeder.Description} = {feeder.VoltAmpere}VA")</p>
                    }
                    
                    <p class="underline">Sub Total = @(feedersVoltAmpere.ToRoundedString())</p>
                    <p>Sub Total with Demand Factor for Elevator Feeders = @(feedersVoltAmpereWithDemandFactor.ToRoundedString())</p>
                }
                
                @if (cranesAndHoistVoltAmpere > 0)
                {
                    <h6>For Cranes and Hoists:</h6>
                    
                    @foreach (var craneAndHoist in cranesAndHoists.Where(ch => !ch.VoltAmpere.HasError))
                    {
                        <p>- @($"{craneAndHoist.Description} = {craneAndHoist.VoltAmpere.Value.ToRoundedString()}VA")</p>
                    }
                    
                    <p class="underline">Sub Total = @(cranesAndHoistVoltAmpere.ToRoundedString())</p>
                    <p>Sub Total with Demand Factor for Cranes and Hoists = @(cranesAndHoistsVoltAmpereWithDemandFactor.ToRoundedString())</p>
                }
                
                <h6>Final total = @((normalMotorsVoltAmpere + feedersVoltAmpereWithDemandFactor + cranesAndHoistsVoltAmpereWithDemandFactor).ToRoundedString())</h6>
            }
            else
            {
                <p>None</p>
            }
        </div>
        
        @{
            var applianceEquipmentVoltAmpere =
                DistributionBoard.FilterVoltAmpere<ApplianceEquipmentOutletCircuit>();
            
            var dryersVoltAmpere = 
                DistributionBoard.FilterVoltAmpere<ApplianceEquipmentOutletCircuit>(
                    aec => aec.ApplianceType == ApplianceType.Dryer
                );

            var dryers =
                DistributionBoard.FilterNestedCircuits<ApplianceEquipmentOutletCircuit>(
                    aec => aec.ApplianceType == ApplianceType.Dryer
                );
            
            var dryersVoltAmpereWithDemandFactor = 
                DemandFactorFormulas.ApplyDemandFactorToDryers(dryers);
            
            var kitchenEquipmentsVoltAmpere =
                DistributionBoard.FilterVoltAmpere<ApplianceEquipmentOutletCircuit>(
                    aec => aec.ApplianceType == ApplianceType.KitchenEquipment
                );

            var kitchenEquipments =
                DistributionBoard.FilterNestedCircuits<ApplianceEquipmentOutletCircuit>(
                    aec => aec.ApplianceType == ApplianceType.KitchenEquipment
                );
            
            var dwellingUnitKitchenEquipmentsVoltAmpereRange =
                DemandFactorFormulas.ApplyDemandFactorToDwellingUnitKitchenEquipment(kitchenEquipments);
            
            var dwellingUnitKitchenEquipmentsVoltAmpereWithDemandFactor =
                dwellingUnitKitchenEquipmentsVoltAmpereRange[0] + dwellingUnitKitchenEquipmentsVoltAmpereRange[1];
            
            var nonDwellingUnitKitchenEquipmentsVoltAmpereWithDemandFactor =
                DemandFactorFormulas.ApplyDemandFactorToNonDwellingUnitKitchenEquipment(kitchenEquipments);
            
            var otherApplianceEquipmentsVoltAmpere = 
                DistributionBoard.FilterVoltAmpere<ApplianceEquipmentOutletCircuit>(
                    aec => aec.ApplianceType == ApplianceType.Other
                );
            
            var otherApplianceEquipments = 
                _applianceEquipmentCircuits.Where(aec => aec.ApplianceType == ApplianceType.Other);
            
            var subBoardsWithOtherApplianceEquipments = 
                DistributionBoard.SubDistributionBoards.Where(
                    b => b.FilterVoltAmpere<ApplianceEquipmentOutletCircuit>(
                        aec => aec.ApplianceType == ApplianceType.Other
                    ) > 0
                );

            var applianceEquipmentVoltAmpereWithDemandFactor =
                dryersVoltAmpereWithDemandFactor +
                otherApplianceEquipmentsVoltAmpere;

            if (DistributionBoard.BuildingClassification == BuildingClassification.DwellingUnit)
            {
                applianceEquipmentVoltAmpereWithDemandFactor += dwellingUnitKitchenEquipmentsVoltAmpereWithDemandFactor;
            }
            else
            {
                applianceEquipmentVoltAmpereWithDemandFactor += nonDwellingUnitKitchenEquipmentsVoltAmpereWithDemandFactor;
            }
        }
        
        <div class="computation-subgroup">
            <h4>Appliance/Equipment Outlets</h4>
            
            @if (applianceEquipmentVoltAmpere > 0)
            {
                @if (dryersVoltAmpere > 0)
                {
                    <h6>For Dryers:</h6>
                    
                    @foreach (var dryer in dryers.Where(d => !d.VoltAmpere.HasError))
                    {
                        <p>- @($"{dryer.Description} = {dryer.VoltAmpere.Value.ToRoundedString()}VA")</p>
                    }
                    
                    <p class="underline">Sub Total = @(dryersVoltAmpere.ToRoundedString())</p>
                    <p>Sub Total with Demand Factor for Dryers = @(dryersVoltAmpereWithDemandFactor.ToRoundedString())</p>
                    <p>Reference: “Demand Factors for Household Electric Clothes Dryers”, Philippine Electrical Code Part 1, Chap. 2.20, no. 2.20.3.15, pp. 57, 2017</p>
                }
                
                @if (kitchenEquipmentsVoltAmpere > 0)
                {
                    <h6>For Kitchen Equipment:</h6>
                    
                    @if (DistributionBoard.BuildingClassification == BuildingClassification.DwellingUnit)
                    {
                        var kitchenEquipmentsLessThan3500VaTotalVoltAmpere = dwellingUnitKitchenEquipmentsVoltAmpereRange[0];
                        var kitchenEquipmentsGreaterThan3500VaTotalVoltAmpere = dwellingUnitKitchenEquipmentsVoltAmpereRange[1];
                        
                        var kitchenEquipmentsLessThan3500Va =
                            kitchenEquipments.Where(ke => ke.VoltAmpere.Value < 3500).ToList();
                        
                        var kitchenEquipmentsGreaterThan3500Va =
                            kitchenEquipments.Where(ke => ke.VoltAmpere.Value >= 3500).ToList();
                        
                        @if (kitchenEquipmentsLessThan3500VaTotalVoltAmpere > 0)
                        {
                            @foreach (var kitchenEquipment in kitchenEquipmentsLessThan3500Va.Where(k => !k.VoltAmpere.HasError))
                            {
                                <p>- @($"{kitchenEquipment.Description} = {kitchenEquipment.VoltAmpere.Value.ToRoundedString()}VA")</p>
                            }
                            
                            <p>Sub Total = @(kitchenEquipmentsLessThan3500Va.Select(ke => ke.VoltAmpere.Value).Sum().ToRoundedString())</p>
                            <p>Sub Total with Demand Factor for Dwelling Unit Kitchen Equipment with Less than 3500 VA = @(kitchenEquipmentsLessThan3500VaTotalVoltAmpere.ToRoundedString())</p>
                        }
                        
                        @if (kitchenEquipmentsGreaterThan3500VaTotalVoltAmpere > 0)
                        {
                            @foreach (var kitchenEquipment in kitchenEquipmentsGreaterThan3500Va.Where(ke => !ke.VoltAmpere.HasError))
                            {
                                <p>- @($"{kitchenEquipment.Description} = {kitchenEquipment.VoltAmpere.Value.ToRoundedString()}VA")</p>
                            }
                            
                            <p>Sub Total = @(kitchenEquipmentsGreaterThan3500Va.Select(ke => ke.VoltAmpere.Value).Sum().ToRoundedString())</p>
                            <p>Sub Total with Demand Factor for Dwelling Unit Kitchen Equipment with Greater than 3500 VA = @(kitchenEquipmentsGreaterThan3500VaTotalVoltAmpere.ToRoundedString())</p>
                        }
                        
                        <p>Reference: “Demand Factors and Loads for Household Electric Ranges, Wall Mounted Ovens, Counter-Mounted Cooking Units, and Other Household Cooking Appliances over 1 ¾ kW”, Philippine Electrical Code Part 1, Chap. 2.20, no. 2.20.3.16, pp. 58, 2017.</p>
                    }
                    else
                    {
                        @foreach (var kitchenEquipment in kitchenEquipments.Where(ke => !ke.VoltAmpere.HasError))
                        {
                            <p>- @($"{kitchenEquipment.Description} = {kitchenEquipment.VoltAmpere.Value.ToRoundedString()}VA")</p>
                        }
                        
                        <p>Sub Total = @(kitchenEquipmentsVoltAmpere.ToRoundedString())</p>
                        <p>Sub Total with Demand Factor for Non-Dwelling Unit Kitchen Equipment = @(nonDwellingUnitKitchenEquipmentsVoltAmpereWithDemandFactor.ToRoundedString())</p>
                        <p>Reference: “Demand Factors for Kitchen Equipment – other than Dwelling Units”, Philippine Electrical Code Part 1, Chap. 2.20, no. 2.20.3.16, pp. 58, 2017.</p>
                    }
                }
                
                @if (otherApplianceEquipmentsVoltAmpere > 0)
                {
                    <h6> For Other Equipment:</h6>
                    @foreach (var otherApplianceEquipment in otherApplianceEquipments.Where(oae => !oae.VoltAmpere.HasError))
                    {
                        <p>- @($"{otherApplianceEquipment.Description} = {otherApplianceEquipment.VoltAmpere.Value.ToRoundedString()}VA")</p>
                    }
                    
                    @foreach (var subBoard in subBoardsWithOtherApplianceEquipments)
                    {
                        var subBoardOtherApplianceEquipmentsVoltAmpere = subBoard.FilterVoltAmpere<ApplianceEquipmentOutletCircuit>(
                            aec => aec.ApplianceType == ApplianceType.Other
                        );
                        <p>- @($"Sub Total ({subBoard.BoardName}) = {subBoardOtherApplianceEquipmentsVoltAmpere.ToRoundedString()}")</p>
                    }
                    
                    <p class="underline">Sub Total = @(otherApplianceEquipmentsVoltAmpere.ToRoundedString())</p>
                    <p>No Demand Factors</p>
                }
                
                <h6>Final total = @(applianceEquipmentVoltAmpereWithDemandFactor.ToRoundedString()) VA</h6>
            }
            else
            {
                <p>None</p>
            }
        </div>
        
        @{
            var spareCircuitsVoltAmpere = DistributionBoard.FilterVoltAmpere<SpareCircuit>();
            var subBoardsWithSpareCircuits =
                DistributionBoard.SubDistributionBoards.Where(
                    b => b.FilterVoltAmpere<SpareCircuit>() > 0
                );
            
            
        }
        <div class="computation-subgroup">
            <h4>Spare Circuits</h4>
            
            @if (spareCircuitsVoltAmpere > 0)
            {
                @for (var i = 0; i < _spareCircuits.Count; i++)
                {
                    var currentSpareCircuit = _spareCircuits[i];
                    <p>- @($"Spare {i + 1} (CKT NO. {currentSpareCircuit.Order}) = {currentSpareCircuit.VoltAmpere.ToRoundedString()}VA")</p>
                }
                    
                @foreach (var subBoard in subBoardsWithSpareCircuits)
                {
                    <p>- @($"Sub Total ({subBoard.BoardName}) = {subBoard.FilterVoltAmpere<SpareCircuit>().ToRoundedString()}")</p>
                }
                    
                <p class="underline">Sub Total = @(spareCircuitsVoltAmpere.ToRoundedString())VA</p>
            }
            else
            {
                <p>None</p>
            }
        </div>
        
        <div class="computation-subgroup">
            <h4>Overall Total</h4>
            <p>Total VA (S) = @(DistributionBoard.VoltAmpereWithDemandFactor.ToRoundedString()) VA</p>
            
            @* @if (DistributionBoard.Phase == BoardPhase.ThreePhase) *@
            @* { *@
            @*     <p>@(DistributionBoard.VoltAmpere.ToRoundedString()) VA / (√3 x @((int) DistributionBoard.Voltage)V) = @(DistributionBoard.Current.Value.ToRoundedString())A</p> *@
            @* } *@
            @* else *@
            @* { *@
            @*     <p>@(DistributionBoard.VoltAmpere.ToRoundedString()) VA / @((int) DistributionBoard.Voltage)V = @(DistributionBoard.Current.Value.ToRoundedString())A</p> *@
            @* } *@
            
            @{
                string overallTotalFormulaExpression = DistributionBoard.Phase == BoardPhase.ThreePhase
                    ? $@"
                        <math>
                            <mrow>
                                <mi>I</mi>
                                <mo>=</mo>
                                <mfrac>
                                    <mrow>
                                        <mi>Total VA</mi>
                                    </mrow>
                                    
                                    <mrow>
                                        <mtext>&radic;</mtext>
                                        <msqrt><mi>3</mi></msqrt>
                                        <mo>&times;</mo>
                                        <mn>{(int)DistributionBoard.Voltage}</mn>
                                        <mi>V</mi>
                                    </mrow>
                                </mfrac>
                            </mrow>
                        </math>
                    "
                    : $@"
                        <math>
                            <mrow>
                                <mi>I</mi>
                                <mo>=</mo>
                                <mfrac>
                                    <mrow>
                                        <mi>Total VA</mi>
                                    </mrow>
                                    
                                    <mrow>
                                        <mn>{(int)DistributionBoard.Voltage}</mn>
                                        <mi>V</mi>
                                    </mrow>
                                </mfrac>
                            </mrow>
                        </math>
                    ";

                string overallTotalExpression = DistributionBoard.Phase == BoardPhase.ThreePhase
                    ? $@"
                        <math>
                            <mrow>
                                <mi>I</mi>
                                <mo>=</mo>
                                <mfrac>
                                    <mrow>
                                        <mn>{DistributionBoard.VoltAmpereWithDemandFactor.ToRoundedString()}</mn>
                                        <mi>VA</mi>
                                    </mrow>
                                    
                                    <mrow>
                                        <mtext>&radic;</mtext>
                                        <msqrt><mi>3</mi></msqrt>
                                        <mo>&times;</mo>
                                        <mn>{(int)DistributionBoard.Voltage}</mn>
                                        <mi>V</mi>
                                    </mrow>
                                </mfrac>
                                <mo>=</mo>
                                <mrow>
                                    <mn>{DistributionBoard.Current.Value.ToRoundedString()}</mn>
                                    <mi>A</mi>
                                </mrow>
                            </mrow>
                        </math>
                    "
                    : $@"
                        <math>
                            <mrow>
                                <mi>I</mi>
                                <mo>=</mo>
                                <mfrac>
                                    <mrow>
                                        <mn>{DistributionBoard.VoltAmpereWithDemandFactor.ToRoundedString()}</mn>
                                        <mi>VA</mi>
                                    </mrow>
                                    
                                    <mrow>
                                        <mn>{(int)DistributionBoard.Voltage}</mn>
                                        <mi>V</mi>
                                    </mrow>
                                </mfrac>
                                <mo>=</mo>
                                <mrow>
                                    <mn>{DistributionBoard.Current.Value.ToRoundedString()}</mn>
                                    <mi>A</mi>
                                </mrow>
                            </mrow>
                        </math>
                    ";             
            }
            
            <div class="math-expression">@((MarkupString) overallTotalFormulaExpression)</div>
            <div class="math-expression">@((MarkupString) overallTotalExpression)</div>
            @* <math display="block"> *@
            @*     <mrow> *@
            @*         <mi>I</mi> *@
            @*         <mo>=</mo> *@
            @*         <mfrac> *@
            @*             <mrow> *@
            @*                 <mi>Total VA</mi> *@
            @*             </mrow> *@
            @*              *@
            @*             <mrow> *@
            @*                 <mn>@((int) DistributionBoard.Voltage)</mn> *@
            @*                 <mi>V</mi> *@
            @*             </mrow> *@
            @*         </mfrac> *@
            @*     </mrow> *@
            @* </math> *@
        </div>
    </div>
    
    <div class="computation-group">
        <h5>B.) Sizing of Circuit Protection</h5>
        
        <div class="computation-subgroup">
            <h4>For Circuit Protection</h4>
            
            @if (DistributionBoard.HasNestedCircuits)
            {
                <p>Overall Total = @(DistributionBoard.Current.Value.ToRoundedString())A + (@(DistributionBoard.HighestMotorLoad.ToRoundedString())A × 1.25) = @(DistributionBoard.CircuitProtectionAmpere.ToRoundedString())</p>
                <strong>• Circuit Protection = Use @(DistributionBoard.AmpereTrip) Ampere Trip, @(DistributionBoard.AmpereFrame) Ampere Frame, @(DistributionBoard.Pole)-Pole, @(DistributionBoard.CircuitProtection.GetDisplayName())</strong>
            }
            else
            {
                <p>No Circuits</p>
            }
        </div>
    </div>
    
    <div class="computation-group">
        <h5>C.) Sizing of Conductors and Raceway</h5>
        
        <div class="computation-subgroup">
            <h4>For Conductors</h4>
            
            @if (DistributionBoard.HasNestedCircuits)
            {
                <p>Overall Total = @(DistributionBoard.Current.Value.ToRoundedString())A + (@(DistributionBoard.HighestMotorLoad.ToRoundedString())A × 0.25) = @(DistributionBoard.ConductorAmpere.ToRoundedString())</p>
                <p>• Conductor = @(DistributionBoard.InitialConductorTextDisplay)</p>
                
                @if (DistributionBoard.InitialConductorSize.HasError)
                {
                    <p>@(DistributionBoard.InitialConductorSize.ErrorMessage)</p>
                }
                else
                {
                    <h6>For Ambient Temperature Conductors Correction Factor under 90 degrees</h6>
                    <p>Chosen Temperature: @(DistributionBoard.AmbientTemperature.GetDisplayName()) degrees</p>
                    <p>• Ampacity of @(DistributionBoard.InitialConductorSize) mm² = @(DistributionBoard.InitialConductorSizeAmpacity) × @(DistributionBoard.AmbientTemperatureMultiplier) = @(DistributionBoard.InitialConductorSizeAmpacity.Value * DistributionBoard.AmbientTemperatureMultiplier)</p>
                }
                
                @if (DistributionBoard.VoltageDropCorrectionConductorSize is null)
                {
                    <strong>Number of Sets = @(DistributionBoard.SetCount)</strong>
                    <strong>Conductor = Use @(DistributionBoard.ConductorTextDisplay)</strong>
                }
                else
                {
                    <p>• Conductor = Use @(DistributionBoard.TemperatureAffectedConductorTextDisplay)</p>
                    
                    <h6>With Voltage Drop Correction</h6>
                    <strong>Number of Sets = @(DistributionBoard.SetCount)</strong>
                    <strong>Conductor = Use @(DistributionBoard.ConductorTextDisplay)</strong>
                }
                
                <strong>Ground = Use @(DistributionBoard.GroundingTextDisplay)</strong>
            }
            else
            {
                <p>No Circuits</p>
            }
            
        </div>
        
        <div class="computation-subgroup">
            <h4>For Raceway</h4>
            @if (DistributionBoard.HasNestedCircuits)
            {
                <strong>Raceway = Use @(DistributionBoard.RacewayTextDisplay)</strong>
            }
            else
            {
                <p>No Circuits</p>
            }
        </div>
    </div>
    
    <div class="computation-group">
        <h6>D.) Voltage Drop</h6>
        
        @if (!DistributionBoard.HasNestedCircuits)
        {
            <p>No Circuits</p>
        } else if
        (
            DistributionBoard.AmpereLoad.HasError ||
            DistributionBoard.R.HasError ||
            DistributionBoard.X.HasError ||
            DistributionBoard.VoltageDrop.HasError
        )
        {
            <p>Cannot calculate voltage drop</p>
        } else if
        (
            DistributionBoard.WireLength is null ||
            DistributionBoard.R.Value is null ||
            DistributionBoard.X.Value is null ||
            DistributionBoard.VoltageDrop.Value is null
        )
        {
            <p>No voltage drop</p>
        }
        else
        {
            var factor = DistributionBoard is ThreePhaseDistributionBoard ? "&radic;3" : "2";
            string voltageDropFormulaExpression = $@"
                <math>
                    <mrow>
                        <mi>VD</mi>
                        <mo>=</mo>
                        <mrow>
                            <mn>{factor}</mn>
                            <mo>&times;</mo>
                            <mi>Ampere Load</mi>
                            <mo>&times;</mo>

                            <mrow>
                                <mtext>&radic;</mtext>
                                <msqrt>
                                    <mtext>(</mtext>
                                    <msup>
                                        <mi>R</mi>
                                        <mn>2</mn>
                                    </msup>
                                    <mo>+</mo>
                                    <msup>
                                        <mi>X</mi>
                                        <mn>2</mn>                
                                    </msup>
                                    <mtext>)</mtext>
                                </msqrt>
                            </mrow>

                            <mo>&times;</mo>

                            <mfrac>
                                <mi>Length</mi>
                                <mrow>
                                    <mn>305</mn>
                                    <mo>&times;</mo>
                                    <mi>No. of Sets</mi>
                                </mrow>
                            </mfrac>
                            
                            <mo>&times;</mo>

                            <mfrac>
                                <mn>100%</mn>
                                <mi>Voltage</mi>
                            </mfrac>
                        </mrow>
                    </mrow>
                </math>
            ";

            string vdClass = DistributionBoard.VoltageDrop.Value.Value > 0.03 ? "error" : "";
            
            string voltageDropExpression = $@"
                <math>
                    <mrow>
                        <mi>VD</mi>
                        <mo>=</mo>
                        <mrow>
                            <mn>{factor}</mn>
                            <mo>&times;</mo>
                            <mi>{DistributionBoard.ConductorAmpere.ToRoundedString()}</mi>
                            <mo>&times;</mo>

                            <mrow>
                                <mtext>&radic;</mtext>
                                <mtext>(</mtext>
                                <msqrt>
                                    <msup>
                                        <mi>{DistributionBoard.R.Value.ToRoundedString()}</mi>
                                        <mn>2</mn>
                                    </msup>
                                    <mo>+</mo>
                                    <msup>
                                        <mi>{DistributionBoard.X.Value.ToRoundedString()}</mi>
                                        <mn>2</mn>                
                                    </msup>
                                </msqrt>
                                <mtext>)</mtext>
                            </mrow>

                            <mo>&times;</mo>

                            <mfrac>
                                <mi>{DistributionBoard.WireLength}</mi>
                                <mrow>
                                    <mn>305</mn>
                                    <mo>&times;</mo>
                                    <mi>{DistributionBoard.SetCount}</mi>
                                </mrow>
                            </mfrac>
                            
                            <mo>&times;</mo>

                            <mfrac>
                                <mn>100%</mn>
                                <mi>{(int) DistributionBoard.Voltage}</mi>
                            </mfrac>
                        </mrow>
                        <mo>=</mo>
                        <mn class={vdClass}>{DistributionBoard.VoltageDrop.Value.ToRoundedString(true)}</mn>
                    </mrow>
                </math>
            ";
            
            <div class="computation-subgroup">
                <strong>Number of Sets: @(DistributionBoard.SetCount)</strong>
                <div class="math-expression">@((MarkupString)voltageDropFormulaExpression)</div>
                <div class="math-expression">@((MarkupString)voltageDropExpression)</div>
            </div>
            
        }
        
    </div>
    
    @if (
        DistributionBoard.HasTransformer && 
        DistributionBoard.TransformerPrimaryProtection != null &&
        DistributionBoard.TransformerSecondaryProtection != null &&
        !DistributionBoard.TransformerRating.HasError && 
        !DistributionBoard.TransformerPrimaryProtectionAmpereTrip.HasError &&
        !DistributionBoard.TransformerSecondaryProtectionAmpereTrip.HasError
    )
    {
        <div class="computation-group">
            <h5>E.) Transformer</h5>
            
            <div class="computation-subgroup">
                <strong>TX = @(DistributionBoard.TransformerRating.Value / 1000)kVA</strong>
                <p>Primary Protection: @(DistributionBoard.TransformerPrimaryProtectionAmpereWithoutMultiplier.ToRoundedString()) A × @(DistributionBoard.TransformerPrimaryProtectionMultiplier) = @(DistributionBoard.TransformerPrimaryProtectionAmpere.ToRoundedString()) A = <strong>Use @(DistributionBoard.TransformerPrimaryProtectionAmpereTrip)AT @(DistributionBoard.TransformerPrimaryProtection.GetDisplayName())</strong></p>
                <p>Secondary Protection: @(DistributionBoard.TransformerSecondaryProtectionAmpereWithoutMultiplier.ToRoundedString()) A × @(DistributionBoard.TransformerSecondaryProtectionMultiplier) = @(DistributionBoard.TransformerSecondaryProtectionAmpere.ToRoundedString()) A = <strong>Use @(DistributionBoard.TransformerSecondaryProtectionAmpereTrip)AT @(DistributionBoard.TransformerSecondaryProtection.GetDisplayName())</strong></p>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public DistributionBoard DistributionBoard { get; set; } = default!;
    
    List<LightingOutletCircuit> _lightingCircuits;
    List<ConvenienceOutletCircuit> _convenienceCircuits;
    List<MotorOutletCircuit> _motorCircuits;
    List<ApplianceEquipmentOutletCircuit> _applianceEquipmentCircuits;
    List<SpareCircuit> _spareCircuits;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _lightingCircuits = DistributionBoard.Circuits.OfType<LightingOutletCircuit>().ToList();
        _convenienceCircuits = DistributionBoard.Circuits.OfType<ConvenienceOutletCircuit>().ToList();
        _motorCircuits = DistributionBoard.Circuits.OfType<MotorOutletCircuit>().ToList();
        _applianceEquipmentCircuits = DistributionBoard.Circuits.OfType<ApplianceEquipmentOutletCircuit>().ToList();
        _spareCircuits = DistributionBoard.Circuits.OfType<SpareCircuit>().ToList();
    }
}