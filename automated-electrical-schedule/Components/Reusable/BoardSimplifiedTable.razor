<div class="simplified-table-wrapper">
    <table class="simplified-table">
        <thead>
            <tr>
                <th rowspan="2">CKT No.</th>
                <th rowspan="2">Load Description</th>
                <th rowspan="2">QTY</th>
                <th rowspan="2">VA</th>
                <th rowspan="2">Voltage</th>
                
                @if (DistributionBoard is ThreePhaseDistributionBoard)
                {
                    <th colspan="4">Ampere Load</th>
                }
                else
                {
                    <th rowspan="2">Ampere Load</th>
                }
                @* <th rowspan="2">Ampere Load</th> *@
                    
                <th colspan="7">Circuit Protection</th>
                <th colspan="4">Conductor Size</th>
            </tr>
            
            <tr>
                @if (DistributionBoard is ThreePhaseDistributionBoard)
                {
                    var config = (DistributionBoard as ThreePhaseDistributionBoard)!.ThreePhaseConfiguration;
                    
                    @if (config == ThreePhaseConfiguration.Delta)
                    {
                        <th>AB</th>
                        <th>BC</th>
                        <th>CA</th>
                        <th>ABC</th>
                    }
                    else
                    {
                        <th>AN</th>
                        <th>BN</th>
                        <th>CN</th>
                        <th>ABC</th>
                    }
                }
                
                <th>AT</th>
                <th>AF</th>
                <th>Phase</th>
                <th>Pole</th>
                <th>Length</th>
                <th>VD</th>
                <th>Type</th>
                <th>Sets</th>
                <th>Phase+Neutral</th>
                <th>Ground</th>
                <th>Raceway</th>
            </tr>
        </thead>
        
        <tbody>
            @foreach (var electricalComponent in _circuitsAndSubBoards)
            {
                switch (electricalComponent)
                {
                    case Circuit circuit:
                        var fixtureCircuit = circuit as FixtureCircuit;
                        var convenienceCircuit = circuit as ConvenienceOutletCircuit;
                        var nonSpaceCircuit = circuit as NonSpaceCircuit;
                        var spareCircuit = circuit as SpareCircuit;
                        var nonSpareCircuit = circuit as NonSpareCircuit;
                        
                        var loadDescription = circuit switch
                        {
                            IDescribed describedCircuit => describedCircuit.Description,
                            SpaceCircuit => "Space",
                            SpareCircuit => "Spare",
                            _ => ""
                        };
                        
                        int rowSpan = 1;
                        
                        if (fixtureCircuit is not null && fixtureCircuit.IsItemized)
                        {
                            rowSpan = fixtureCircuit.Fixtures.Count + 1;
                        } 
                        else if (convenienceCircuit is not null)
                        {
                            if (convenienceCircuit.GfciReceptacleQuantity > 0) rowSpan += 1;
                            if (convenienceCircuit.OneGangQuantity > 0) rowSpan += 1;
                            if (convenienceCircuit.TwoGangQuantity > 0) rowSpan += 1;
                            if (convenienceCircuit.ThreeGangQuantity > 0) rowSpan += 1;
                            if (convenienceCircuit.FourGangQuantity > 0) rowSpan += 1;
                        }
                        
                        <tr>
                            <td rowspan="@rowSpan">@(circuit.Order)</td>
                            <td>@loadDescription</td>
                            <td>
                                @if (fixtureCircuit != null && !fixtureCircuit.IsItemized && fixtureCircuit.Fixtures.Count > 0)
                                {
                                    @fixtureCircuit.Fixtures[0].Quantity
                                } 
                                else if (circuit is MotorOutletCircuit)
                                {
                                    @("1")
                                }
                            </td>
                            
                            @if (nonSpaceCircuit is null)
                            {
                                <td></td>
                            }
                            else if (spareCircuit is not null)
                            {
                                <td>@spareCircuit.VoltAmpere.ToRoundedString()</td>
                            } 
                            else if (nonSpareCircuit is not null)
                            {
                                <td>@nonSpareCircuit.VoltAmpere.Value.ToRoundedString()</td>
                            }
                            
                            <td>@nonSpaceCircuit?.Voltage.ToString()</td>
                            
                            @if (DistributionBoard is ThreePhaseDistributionBoard)
                            {
                                <td>
                                    @if (nonSpaceCircuit?.LineToLineVoltage == LineToLineVoltage.A)
                                    {
                                        @(nonSpaceCircuit.AmpereLoad.Value.ToRoundedString())
                                    }
                                </td>
                                
                                <td>
                                    @if (nonSpaceCircuit?.LineToLineVoltage == LineToLineVoltage.B)
                                    {
                                        @(nonSpaceCircuit.AmpereLoad.Value.ToRoundedString())
                                    }
                                </td>
                
                                <td>
                                    @if (nonSpaceCircuit?.LineToLineVoltage == LineToLineVoltage.C)
                                    {
                                        @(nonSpaceCircuit.AmpereLoad.Value.ToRoundedString())
                                    }
                                </td>
                                
                                <td>
                                    @if (nonSpaceCircuit?.LineToLineVoltage == LineToLineVoltage.Abc)
                                    {
                                        @(nonSpaceCircuit.AmpereLoad.Value.ToRoundedString())
                                    }
                                </td>
                            }
                            else
                            {
                                if (nonSpaceCircuit is null)
                                {
                                    <td></td>
                                }
                                else
                                {
                                    <td>@(nonSpaceCircuit.AmpereLoad.Value.ToRoundedString())</td>
                                }
                            }
            
                            <td>@nonSpaceCircuit?.AmpereTrip</td>
                            <td>@nonSpaceCircuit?.AmpereFrame</td>
                            <td>@nonSpaceCircuit?.Phase</td>
                            <td>@nonSpaceCircuit?.Pole</td>
                            
                            @if (nonSpaceCircuit?.WireLength > 0)
                            {
                                <td>@nonSpaceCircuit.WireLength</td>
                            }
                            else
                            {
                                <td></td>
                            }
                            
                            @if (nonSpaceCircuit is null)
                            {
                                <td></td>
                            }
                            else
                            {
                                <td>
                                    @if (!nonSpaceCircuit.VoltageDrop.HasError)
                                    {
                                        @(nonSpaceCircuit.VoltageDrop.Value.ToRoundedString(true))
                                    }
                                </td>
                            }
                            
                            <td>@nonSpaceCircuit?.CircuitProtection.GetDisplayName()</td>
                            <td>@nonSpaceCircuit?.SetCount</td>
                            <td>@nonSpaceCircuit?.ConductorTextDisplay</td>
                            <td>@nonSpaceCircuit?.GroundingTextDisplay</td>
                            <td>@nonSpaceCircuit?.RacewayTextDisplay</td>
                        </tr>
        
                        @if (fixtureCircuit is not null && fixtureCircuit.IsItemized)
                        {
                            @foreach (var fixture in fixtureCircuit.Fixtures)
                            {
                                <tr>
                                    <td class="subitem-desc">@fixture.Description</td>
                                    <td>@fixture.Quantity</td>
                                    <td></td>
                                    <td></td>
                        
                                    @if (DistributionBoard is ThreePhaseDistributionBoard)
                                    {
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    }
                                    else
                                    {
                                        <td></td>
                                    }
                        
                                    @for (var k = 0; k < 11; k++)
                                    {
                                        <td></td>
                                    }
                                </tr>
                            }
                        }
                        else if (convenienceCircuit is not null)
                        {
                            var values = new List<(string, int)>();
                            if (convenienceCircuit.GfciReceptacleQuantity > 0)
                            {
                                values.Add((
                                    $"GFCI Receptacle ({convenienceCircuit.AmpereTrip} AT)", 
                                    convenienceCircuit.GfciReceptacleQuantity
                                ));
                            }
                            if (convenienceCircuit.OneGangQuantity > 0)
                            {
                                values.Add((
                                    $"1-Gang", 
                                    convenienceCircuit.OneGangQuantity
                                ));
                            }
                            if (convenienceCircuit.TwoGangQuantity > 0)
                            {
                                values.Add((
                                    $"2-Gang", 
                                    convenienceCircuit.TwoGangQuantity
                                ));
                            }
                            if (convenienceCircuit.ThreeGangQuantity > 0)
                            {
                                values.Add((
                                    $"3-Gang", 
                                    convenienceCircuit.ThreeGangQuantity
                                ));
                            }
                            if (convenienceCircuit.FourGangQuantity > 0)
                            {
                                values.Add((
                                    $"4-Gang", 
                                    convenienceCircuit.FourGangQuantity
                                ));
                            }
                            
                            foreach (var (description, quantity) in values)
                            {
                                <tr>
                                    <td class="subitem-desc">@description</td>
                                    <td>@quantity</td>
                                    <td></td>
                                    <td></td>
                        
                                    @if (DistributionBoard is ThreePhaseDistributionBoard)
                                    {
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    }
                                    else
                                    {
                                        <td></td>
                                    }
                        
                                    @for (var k = 0; k < 11; k++)
                                    {
                                        <td></td>
                                    }
                                </tr>
                            }
                        }
                        break;
                    case DistributionBoard subDistributionBoard:
                        <tr>
                            <td>@(subDistributionBoard.Order)</td>
                            <td>@subDistributionBoard.BoardName</td>
                            <td></td>
                            <td>@subDistributionBoard.VoltAmpere.ToRoundedString()</td>
                            <td>@((int) subDistributionBoard.Voltage)</td>
                            
                            @if (DistributionBoard is ThreePhaseDistributionBoard)
                            {
                                if (subDistributionBoard is ThreePhaseDistributionBoard subThreePhaseBoard)
                                {
                                    <td>
                                        @if (subThreePhaseBoard.AmpereLoadA != 0)
                                        {
                                            @(subThreePhaseBoard.AmpereLoadA.ToRoundedString())
                                        }
                                    </td>
                            
                                    <td>
                                        @if (subThreePhaseBoard.AmpereLoadB != 0)
                                        {
                                            @(subThreePhaseBoard.AmpereLoadB.ToRoundedString())
                                        }
                                    </td>
                            
                                    <td>
                                        @if (subThreePhaseBoard.AmpereLoadC != 0)
                                        {
                                            @(subThreePhaseBoard.AmpereLoadC.ToRoundedString())
                                        }
                                    </td>
                            
                                    <td>
                                        @if (subThreePhaseBoard.AmpereLoadAbc != 0)
                                        {
                                            @(subThreePhaseBoard.AmpereLoadAbc.ToRoundedString())
                                        }
                                    </td>
                                }
                                else
                                {
                                    <td>
                                        @if (subDistributionBoard.LineToLineVoltage == LineToLineVoltage.A && !subDistributionBoard.AmpereLoad.HasError)
                                        {
                                            @(subDistributionBoard.AmpereLoad.Value.ToRoundedString())
                                        }
                                    </td>
                            
                                    <td>
                                        @if (subDistributionBoard.LineToLineVoltage == LineToLineVoltage.B && !subDistributionBoard.AmpereLoad.HasError)
                                        {
                                            @(subDistributionBoard.AmpereLoad.Value.ToRoundedString())
                                        }
                                    </td>
                            
                                    <td>
                                        @if (subDistributionBoard.LineToLineVoltage == LineToLineVoltage.C && !subDistributionBoard.AmpereLoad.HasError)
                                        {
                                            @(subDistributionBoard.AmpereLoad.Value.ToRoundedString())
                                        }
                                    </td>
                            
                                    <td></td>
                                }
                            }
                            else
                            {
                                <td>
                                    @if (!subDistributionBoard.AmpereLoad.HasError)
                                    {
                                        @(subDistributionBoard.AmpereLoad.Value.ToRoundedString())
                                    }
                                </td>
                            }
                            
                            <td>
                                @if (!subDistributionBoard.AmpereTrip.HasError)
                                {
                                    @subDistributionBoard.AmpereTrip.Value
                                }
                            </td>
                            
                            <td>
                                @if (!subDistributionBoard.AmpereFrame.HasError)
                                {
                                    @subDistributionBoard.AmpereFrame.Value
                                }
                            </td>
                            
                            <td>@(subDistributionBoard.Phase == BoardPhase.SinglePhase ? 1 : 3)</td>
                            <td>@subDistributionBoard.Pole</td>
                            <td>@subDistributionBoard.WireLength</td>
                            
                            <td>
                                @if (!subDistributionBoard.VoltageDrop.HasError)
                                {
                                    @(subDistributionBoard.VoltageDrop.Value.ToRoundedString(true))
                                }
                            </td>
                            <td>@subDistributionBoard.CircuitProtection.GetDisplayName()</td>
                            <td>@subDistributionBoard.SetCount</td>
                            
                            <td>
                                @if (!subDistributionBoard.ConductorSize.HasError)
                                {
                                    @($"{subDistributionBoard.ConductorWireCount}-{subDistributionBoard.ConductorSize}mm\u00b2 {subDistributionBoard.ConductorType}")
                                }
                            </td>
                            
                            <td>
                                @if (!subDistributionBoard.GroundingSize.HasError)
                                {
                                    @($"{NonSpaceCircuit.GroundingWireCount}-{subDistributionBoard.GroundingSize}mm\u00b2 {subDistributionBoard.Grounding}")
                                }
                            </td>
                            
                            <td>
                                @if (!subDistributionBoard.RacewaySize.HasError)
                                {
                                    @($"{subDistributionBoard.RacewaySize}mm ø {subDistributionBoard.RacewayType.GetDisplayName()}")
                                }
                            </td>
                        </tr>
                        break;
                }
            }
        </tbody>
        
        <tfoot>
            <tr>
                <td></td>
                <td>Total</td>
                <td></td>
                <td>@DistributionBoard.VoltAmpere</td>
                <td></td>
                
                @if (DistributionBoard is ThreePhaseDistributionBoard threePhaseBoard)
                {
                    <td>@(threePhaseBoard.AmpereLoadA.ToRoundedString())</td>
                    <td>@(threePhaseBoard.AmpereLoadB.ToRoundedString())</td>
                    <td>@(threePhaseBoard.AmpereLoadC.ToRoundedString())</td>
                    <td>@(threePhaseBoard.AmpereLoadAbc.ToRoundedString())</td>
                }
                else
                {
                    <td>
                        @if (!DistributionBoard.AmpereLoad.HasError)
                        {
                            @(DistributionBoard.AmpereLoad.Value.ToRoundedString())
                        }
                    </td>
                }
                
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </tfoot>
    </table>
</div>

@code {
    [Parameter] public DistributionBoard DistributionBoard { get; set; } = default!;
    
    private List<IOrdered> _circuitsAndSubBoards = [];

    protected override void OnParametersSet()
    {
        _circuitsAndSubBoards =
            DistributionBoard.Circuits.Cast<IOrdered>()
                .Concat(DistributionBoard.SubDistributionBoards)
                .OrderBy(e => e.Order)
                .ToList();
    }
}