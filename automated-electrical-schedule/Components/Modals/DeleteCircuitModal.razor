@inject NavigationManager Navigation
@inject DatabaseContext DatabaseContext

@if (IsOpen)
{
    <div class="modal-wrapper" @onclick="CloseModal">
        <div class="modal delete-circuit-modal">
            <div class="modal-header">
                <h5>Delete circuit?</h5>
            </div>

            <div class="modal-content delete-circuit-modal-content">
                <p class="delete-confirmation">Are you sure you want to delete <em>@(_description)</em>? This action cannot be undone.</p>
            </div>

            <div class="modal-footer modal-footer-btns">
                <button
                    class="btn-text delete-circuit-modal-cancel-btn"
                    @onclick="CloseModal">
                    Cancel
                </button>

                <button
                    class="btn-text delete-circuit-modal-edit-btn btn-destructive"
                    @onclick="DeleteCircuit">
                    Delete
                </button>
            </div>

        </div>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter] public Circuit Circuit { get; set; } = default!;

    [Parameter] public EventCallback OnCircuitDelete { get; set; }

    string _description = string.Empty;
    
    protected override void OnParametersSet()
    {
        _description = Circuit switch
        {
            IDescribed describedCircuit => describedCircuit.Description,
            SpaceCircuit spaceCircuit => "this space",
            SpareCircuit spareCircuit => "this spare",
            _ => "this circuit"
        };
    }

    async Task CloseModal()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    async Task DeleteCircuit()
    {
        Circuit.ParentDistributionBoard.DecreaseOrderOfSucceedingChildren(Circuit.Order);
        DatabaseContext.Circuits.Remove(Circuit);
        await DatabaseContext.SaveChangesAsync();
        await CloseModal();
        await OnCircuitDelete.InvokeAsync();
    }

}