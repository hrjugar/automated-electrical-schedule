@inject NavigationManager Navigation
@inject DatabaseContext DatabaseContext


@if (IsOpen && _editContext != null && _newDistributionBoard != null)
{
    <div class="modal-wrapper" @onclick="@CloseModal">
        <EditForm
            class="modal create-or-edit-board-modal"
            @onclick:stopPropagation="true"
            EditContext=@_editContext
            OnValidSubmit=@HandleValidFormSubmit>

            <ObjectGraphDataAnnotationsValidator/>

            <div class="modal-header">
                <h5>@(IsNew ? "Add" : "Edit") Board</h5>
            </div>

            <div class="modal-content create-or-edit-board-modal-content">
                @{
                    var threePhaseBoard = _newDistributionBoard as ThreePhaseDistributionBoard;
                    var parentThreePhaseBoard = _newDistributionBoard.ParentDistributionBoard as ThreePhaseDistributionBoard;
                }

                <div class="create-or-edit-board-modal-fields">
                    <div class="create-or-edit-board-modal-field">
                        <label>Board Name <span class="red-asterisk">*</span></label>
                        <InputText class="input-primary" @bind-Value="_newDistributionBoard.BoardName" placeholder="Bedroom Main PB"/>
                        <ValidationMessage For=@(() => _newDistributionBoard.BoardName)/>
                    </div>

                    <div class="create-or-edit-board-modal-field-row">
                        <div class="create-or-edit-board-modal-field">
                            <label>Phase <span class="red-asterisk">*</span></label>
                            <InputSelect @bind-Value:get=_newDistributionBoard.Phase @bind-Value:set="UpdatePhase" disabled="@(!IsNew || _newDistributionBoard.ParentDistributionBoard is SinglePhaseDistributionBoard)">
                                @foreach (var phase in _newDistributionBoard.AllowedPhases)
                                {
                                    <option value="@phase">@phase.GetDisplayName()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => _newDistributionBoard.Phase)/>
                        </div>

                        @if (threePhaseBoard != null)
                        {
                            <div class="create-or-edit-board-modal-field">
                                <label>Configuration <span class="red-asterisk">*</span></label>
                                <InputSelect
                                    Value="threePhaseBoard.ThreePhaseConfiguration"
                                    ValueChanged="@((ThreePhaseConfiguration config) => UpdateThreePhaseConfiguration(config))"
                                    ValueExpression="@(() => threePhaseBoard.ThreePhaseConfiguration)"
                                    disabled="@(threePhaseBoard.ParentDistributionBoard is ThreePhaseDistributionBoard || !IsNew)">
                                    @foreach (ThreePhaseConfiguration config in Enum.GetValues(typeof(ThreePhaseConfiguration)))
                                    {
                                        <option value="@config">@config.GetDisplayName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For=@(() => threePhaseBoard.ThreePhaseConfiguration)/>
                            </div>
                        }
                    </div>

                    @if (parentThreePhaseBoard is not null)
                    {
                        <div class="create-or-edit-board-modal-field">
                            <label>Line-to-Line Voltage Type <span class="red-asterisk">*</span></label>
                            <InputSelect
                                @bind-Value="@_newDistributionBoard.LineToLineVoltage"
                                disabled="@(_newDistributionBoard is ThreePhaseDistributionBoard || _newDistributionBoard.ParentDistributionBoard is not ThreePhaseDistributionBoard)">
                                @foreach (var linetoLineVoltage in _newDistributionBoard.AllowedLineToLineVoltages)
                                {
                                    <option value="@linetoLineVoltage">@linetoLineVoltage.GetDisplayName(parentThreePhaseBoard.ThreePhaseConfiguration)</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => _newDistributionBoard.LineToLineVoltage)/>
                        </div>
                    }


                    <div class="create-or-edit-board-modal-field">
                        <label>Voltage <span class="red-asterisk">*</span></label>
                        <InputSelect
                            Value=_newDistributionBoard.Voltage
                            ValueChanged="@((BoardVoltage voltage) => UpdateVoltage(voltage))"
                            ValueExpression="@(() => _newDistributionBoard.Voltage)">
                            @foreach (var voltage in _newDistributionBoard.AllowedVoltages)
                            {
                                <option value="@voltage">@voltage.GetDisplayName()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For=@(() => _newDistributionBoard.Voltage)/>
                    </div>

                    @if (_newDistributionBoard.ParentDistributionBoard is not null)
                    {
                        <div class="create-or-edit-board-modal-field">
                            <label>Wire Length (m) <span class="red-asterisk">*</span></label>
                            <InputNumber class="input-primary" @bind-Value="_newDistributionBoard.WireLength"/>
                            <ValidationMessage For=@(() => _newDistributionBoard.WireLength)/>
                        </div>
                    }

                    <div class="create-or-edit-board-modal-field">
                        <label>Circuit Protection <span class="red-asterisk">*</span></label>
                        <InputSelect @bind-Value=_newDistributionBoard.CircuitProtection>
                            @foreach (var circuitProtection in DistributionBoard.AllowedCircuitProtections)
                            {
                                <option value="@circuitProtection">@circuitProtection.GetDisplayName()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For=@(() => _newDistributionBoard.CircuitProtection)/>
                    </div>

                    <div class="create-or-edit-board-modal-field-row">
                        <div class="create-or-edit-board-modal-field">
                            <label>Conductor Type <span class="red-asterisk">*</span></label>

                            <InputSelect @bind-Value="_newDistributionBoard.ConductorTypeId">
                                @foreach (var conductorType in ConductorType.All)
                                {
                                    <option value="@conductorType.Id">@conductorType.ToString()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => _newDistributionBoard.ConductorTypeId)/>
                        </div>

                        <div class="create-or-edit-board-modal-field">
                            <label>Grounding <span class="red-asterisk">*</span></label>

                            <InputSelect @bind-Value="_newDistributionBoard.GroundingId">
                                @foreach (var grounding in ConductorType.All)
                                {
                                    <option value="@grounding.Id">@grounding.ToString()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => _newDistributionBoard.GroundingId)/>
                        </div>
                    </div>

                    <div class="create-or-edit-board-modal-field">
                        <label>Raceway Type <span class="red-asterisk">*</span></label>
                        <InputSelect @bind-Value=_newDistributionBoard.RacewayType>
                            @foreach (RacewayType racewayType in Enum.GetValues(typeof(RacewayType)))
                            {
                                <option value="@racewayType">@racewayType.GetDisplayName()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For=@(() => _newDistributionBoard.RacewayType)/>
                    </div>

                    @if (_newDistributionBoard.HasTransformer)
                    {
                        <div class="create-or-edit-board-modal-field">
                            <label>Transformer Primary Protection <span class="red-asterisk">*</span></label>

                            <InputSelect @bind-Value="@_newDistributionBoard.TransformerPrimaryProtection" disabled="@(_newDistributionBoard.ParentDistributionBoard == null)">
                                @foreach (var transformerPrimaryProtection in _newDistributionBoard.AllowedTransformerPrimaryProtections)
                                {
                                    <option value="@transformerPrimaryProtection">@transformerPrimaryProtection.GetDisplayName()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => _newDistributionBoard.TransformerPrimaryProtection)/>
                        </div>

                        <div class="create-or-edit-board-modal-field">
                            <label>Transformer Secondary Protection <span class="red-asterisk">*</span></label>

                            <InputSelect @bind-Value="@_newDistributionBoard.TransformerSecondaryProtection">
                                @foreach (var transformerSecondaryProtection in DistributionBoard.AllowedCircuitProtections)
                                {
                                    <option value="@transformerSecondaryProtection">@transformerSecondaryProtection.GetDisplayName()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => _newDistributionBoard.TransformerSecondaryProtection)/>
                        </div>
                    }

                    @if (_newDistributionBoard.HasBreaker)
                    {
                        <div class="create-or-edit-board-modal-field">
                            <label>Breaker Circuit Protection <span class="red-asterisk">*</span></label>
                            <InputSelect @bind-Value=_newDistributionBoard.BreakerCircuitProtection>
                                @foreach (var circuitProtection in DistributionBoard.AllowedCircuitProtections)
                                {
                                    <option value="@circuitProtection">@circuitProtection.GetDisplayName()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => _newDistributionBoard.BreakerCircuitProtection)/>
                        </div>

                        <div class="create-or-edit-board-modal-field-row">
                            <div class="create-or-edit-board-modal-field">
                                <label>Breaker Conductor Type <span class="red-asterisk">*</span></label>

                                <InputSelect @bind-Value="_newDistributionBoard.BreakerConductorTypeId">
                                    @foreach (var conductorType in ConductorType.All)
                                    {
                                        <option value="@conductorType.Id">@conductorType.ToString()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For=@(() => _newDistributionBoard.BreakerConductorTypeId)/>
                            </div>

                            <div class="create-or-edit-board-modal-field">
                                <label>Breaker Grounding <span class="red-asterisk">*</span></label>

                                <InputSelect @bind-Value="_newDistributionBoard.GroundingId">
                                    @foreach (var grounding in ConductorType.All)
                                    {
                                        <option value="@grounding.Id">@grounding.ToString()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For=@(() => _newDistributionBoard.BreakerGroundingId)/>
                            </div>
                        </div>

                        <div class="create-or-edit-board-modal-field">
                            <label>Breaker Raceway Type <span class="red-asterisk">*</span></label>
                            <InputSelect @bind-Value=_newDistributionBoard.RacewayType>
                                @foreach (RacewayType racewayType in Enum.GetValues(typeof(RacewayType)))
                                {
                                    <option value="@racewayType">@racewayType.GetDisplayName()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => _newDistributionBoard.BreakerRacewayType)/>
                        </div>
                    }
                </div>

            </div>

            <div class="modal-footer modal-footer-btns">
                <button
                    class="btn-text create-or-edit-board-modal-cancel-btn"
                    type="button"
                    @onclick="CloseModal">
                    Cancel
                </button>

                <button
                    class="btn-text create-or-edit-board-modal-edit-btn btn-primary"
                    type="submit"
                    disabled="@(!_editContext.Validate())">
                    @(IsNew ? "Add" : "Edit")
                </button>
            </div>
        </EditForm>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter] public DistributionBoard DistributionBoard { get; set; } = default!;

    [Parameter] public bool IsNew { get; set; }

    EditContext? _editContext;

    DistributionBoard? _newDistributionBoard;

    protected override void OnParametersSet()
    {
        if (IsNew)
        {
            if (DistributionBoard is SinglePhaseDistributionBoard)
            {
                _newDistributionBoard = new SinglePhaseDistributionBoard();
                _newDistributionBoard.LineToLineVoltage = DistributionBoard.LineToLineVoltage;
            }
            else if (DistributionBoard is ThreePhaseDistributionBoard threePhaseBoard)
            {
                _newDistributionBoard = new ThreePhaseDistributionBoard
                {
                    LineToLineVoltage = LineToLineVoltage.Abc,
                    ThreePhaseConfiguration = threePhaseBoard.ThreePhaseConfiguration
                };
            }

            _newDistributionBoard.ParentDistributionBoardId = DistributionBoard.Id;
            _newDistributionBoard.ParentDistributionBoard = DistributionBoard;
            _newDistributionBoard.Phase = DistributionBoard.Phase;
            _newDistributionBoard.WireLength = 1;
            _newDistributionBoard.Voltage = _newDistributionBoard.AllowedVoltages[0];

            if (_newDistributionBoard.HasTransformer)
            {
                _newDistributionBoard.TransformerPrimaryProtection = _newDistributionBoard.AllowedTransformerPrimaryProtections[0];
                _newDistributionBoard.TransformerSecondaryProtection = DistributionBoard.AllowedCircuitProtections[0];
            }

            if (_newDistributionBoard.HasBreaker)
            {
                _newDistributionBoard.BreakerCircuitProtection = DistributionBoard.AllowedCircuitProtections[0];
                _newDistributionBoard.BreakerSetCount = 1;
                _newDistributionBoard.BreakerConductorTypeId = ConductorType.All[0].Id;
                _newDistributionBoard.BreakerGroundingId = ConductorType.All[0].Id;
                _newDistributionBoard.BreakerRacewayType = RacewayType.Pvc;
            }
        }
        else
        {
            _newDistributionBoard = DistributionBoard.Clone();
        }

        _editContext = new EditContext(_newDistributionBoard);
    }

    async Task CloseModal()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    void UpdatePhase(BoardPhase phase)
    {
        DistributionBoard updatedNewDistributionBoard;

        if (phase == BoardPhase.SinglePhase)
        {
            updatedNewDistributionBoard = new SinglePhaseDistributionBoard();

            if (_newDistributionBoard?.ParentDistributionBoard is ThreePhaseDistributionBoard)
            {
                updatedNewDistributionBoard.LineToLineVoltage = LineToLineVoltage.A;
            }
        }
        else
        {
            updatedNewDistributionBoard = new ThreePhaseDistributionBoard
            {
                LineToLineVoltage = LineToLineVoltage.Abc,
                ThreePhaseConfiguration = ((ThreePhaseDistributionBoard) DistributionBoard).ThreePhaseConfiguration
            };
        }

        updatedNewDistributionBoard.Id = _newDistributionBoard!.Id;
        updatedNewDistributionBoard.ParentDistributionBoard = _newDistributionBoard.ParentDistributionBoard;
        updatedNewDistributionBoard.ParentDistributionBoardId = _newDistributionBoard.ParentDistributionBoardId;
        updatedNewDistributionBoard.BoardName = _newDistributionBoard.BoardName;
        updatedNewDistributionBoard.Phase = phase;
        updatedNewDistributionBoard.Voltage = updatedNewDistributionBoard.AllowedVoltages[0];
        updatedNewDistributionBoard.WireLength = _newDistributionBoard.WireLength;
        updatedNewDistributionBoard.CircuitProtection = _newDistributionBoard.CircuitProtection;
        updatedNewDistributionBoard.SetCount = _newDistributionBoard.SetCount;
        updatedNewDistributionBoard.ConductorTypeId = _newDistributionBoard.ConductorTypeId;
        updatedNewDistributionBoard.GroundingId = _newDistributionBoard.GroundingId;
        updatedNewDistributionBoard.RacewayType = _newDistributionBoard.RacewayType;

        if (updatedNewDistributionBoard.HasTransformer)
        {
            updatedNewDistributionBoard.TransformerPrimaryProtection = updatedNewDistributionBoard.AllowedTransformerPrimaryProtections[0];
            updatedNewDistributionBoard.TransformerSecondaryProtection = DistributionBoard.AllowedCircuitProtections[0];
        }

        if (updatedNewDistributionBoard.HasBreaker)
        {
            updatedNewDistributionBoard.BreakerCircuitProtection = DistributionBoard.AllowedCircuitProtections[0];
            updatedNewDistributionBoard.BreakerSetCount = 1;
            updatedNewDistributionBoard.BreakerConductorTypeId = ConductorType.All[0].Id;
            updatedNewDistributionBoard.BreakerGroundingId = ConductorType.All[0].Id;
            updatedNewDistributionBoard.BreakerRacewayType = RacewayType.Pvc;
        }

        _newDistributionBoard = updatedNewDistributionBoard;
        _editContext = new EditContext(_newDistributionBoard);
    }

    void UpdateThreePhaseConfiguration(ThreePhaseConfiguration newConfiguration)
    {
        var threePhaseBoard = _newDistributionBoard as ThreePhaseDistributionBoard;
        threePhaseBoard!.ThreePhaseConfiguration = newConfiguration;

        var allowedVoltages = threePhaseBoard.AllowedVoltages;
        if (!allowedVoltages.Contains(threePhaseBoard.Voltage))
        {
            threePhaseBoard.Voltage = allowedVoltages[0];
        }

        StateHasChanged();
    }

    void UpdateVoltage(BoardVoltage voltage)
    {
        var previousHasBreaker = _newDistributionBoard!.HasBreaker;
        var previousHasTransformer = _newDistributionBoard.HasTransformer;

        _newDistributionBoard.Voltage = voltage;

        if (_newDistributionBoard.HasBreaker)
        {
            if (_newDistributionBoard.HasBreaker != previousHasBreaker)
            {
                _newDistributionBoard.BreakerCircuitProtection = DistributionBoard.AllowedCircuitProtections[0];
                _newDistributionBoard.BreakerSetCount = 1;
                _newDistributionBoard.BreakerConductorTypeId = ConductorType.All[0].Id;
                _newDistributionBoard.BreakerGroundingId = ConductorType.All[0].Id;
                _newDistributionBoard.BreakerRacewayType = RacewayType.Pvc;
            }
        }
        else
        {
            _newDistributionBoard.BreakerCircuitProtection = null;
            _newDistributionBoard.BreakerSetCount = null;
            _newDistributionBoard.BreakerConductorTypeId = null;
            _newDistributionBoard.BreakerGroundingId = null;
            _newDistributionBoard.BreakerRacewayType = null;
        }

        if (_newDistributionBoard.HasTransformer)
        {
            if (_newDistributionBoard.HasTransformer != previousHasTransformer)
            {
                _newDistributionBoard.TransformerPrimaryProtection = _newDistributionBoard.AllowedTransformerPrimaryProtections[0];
                _newDistributionBoard.TransformerSecondaryProtection = DistributionBoard.AllowedCircuitProtections[0];
            }
        }
        else
        {
            _newDistributionBoard.TransformerPrimaryProtection = null;
            _newDistributionBoard.TransformerSecondaryProtection = null;
        }

        StateHasChanged();
    }

    async Task HandleValidFormSubmit()
    {
        if (IsNew)
        {
            await DatabaseContext.DistributionBoards.AddAsync(_newDistributionBoard!);
        }
        else
        {
            DatabaseContext.Entry(DistributionBoard).CurrentValues.SetValues(_newDistributionBoard!);
            DatabaseContext.Update(DistributionBoard);
        }

        await DatabaseContext.SaveChangesAsync();
        await CloseModal();

        if (IsNew)
        {
            Navigation.NavigateTo($"/board/{_newDistributionBoard!.Id}");
        }
    }

}