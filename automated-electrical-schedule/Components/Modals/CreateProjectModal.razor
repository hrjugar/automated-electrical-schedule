@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject DatabaseContext DatabaseContext

@if (IsOpen && _editContext != null)
{
    <div class="modal-wrapper" @onclick="CloseModal">
        <EditForm
            class="modal create-project-modal"
            @onclick:stopPropagation="true"
            EditContext=@_editContext
            OnValidSubmit=@HandleValidFormSubmit>

            <ObjectGraphDataAnnotationsValidator/>

            <div class="modal-header">
                <h5>Create Project</h5>
            </div>

            <div class="modal-content create-project-modal-fields">
                <div class="create-project-modal-field">
                    <label>Project Name <span class="red-asterisk">*</span></label>
                    <InputText class="input-primary" @bind-Value="_newProject.ProjectName" placeholder="Bedroom Elec. SOL"/>
                    <ValidationMessage For=@(() => _newProject.ProjectName)/>
                </div>

                <div class="create-project-modal-field">
                    <label>Main Distribution Board Name <span class="red-asterisk">*</span></label>
                    <InputText class="input-primary" @bind-Value="_newProject.MainDistributionBoard.BoardName" placeholder="Bedroom Main PB"/>
                    <ValidationMessage For=@(() => _newProject.MainDistributionBoard.BoardName)/>
                </div>

                <div class="create-project-modal-field-row">
                    <div class="create-project-modal-field">
                        <label>Phase <span class="red-asterisk">*</span></label>
                        <InputSelect @bind-Value:get=_newProject.MainDistributionBoard.Phase @bind-Value:set="UpdatePhase">
                            @foreach (BoardPhase phase in Enum.GetValues(typeof(BoardPhase)))
                            {
                                <option value="@phase">@phase.GetDisplayName()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For=@(() => _newProject.MainDistributionBoard.Phase)/>
                    </div>

                    @if (_newProject.MainDistributionBoard is ThreePhaseDistributionBoard threePhaseDistributionBoard)
                    {
                        <div class="create-project-modal-field">
                            <label>Configuration <span class="red-asterisk">*</span></label>
                            <InputSelect
                                Value="threePhaseDistributionBoard.ThreePhaseConfiguration"
                                ValueChanged="@((ThreePhaseConfiguration config) => UpdateThreePhaseConfiguration(config))"
                                ValueExpression="@(() => threePhaseDistributionBoard.ThreePhaseConfiguration)">
                                @foreach (ThreePhaseConfiguration config in Enum.GetValues(typeof(ThreePhaseConfiguration)))
                                {
                                    <option value="@config">@config.GetDisplayName()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => threePhaseDistributionBoard.ThreePhaseConfiguration)/>
                        </div>
                    }
                </div>

                <div class="create-project-modal-field">
                    <label>Voltage <span class="red-asterisk">*</span></label>
                    <InputSelect @bind-Value=_newProject.MainDistributionBoard.Voltage>
                        @foreach (var voltage in _newProject.MainDistributionBoard.GetAllowedVoltages())
                        {
                            <option value="@voltage">@voltage.GetDisplayName()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=@(() => _newProject.MainDistributionBoard.Voltage)/>
                </div>

                <div class="create-project-modal-field">
                    <label>Circuit Protection <span class="red-asterisk">*</span></label>
                    <InputSelect @bind-Value=_newProject.MainDistributionBoard.CircuitProtection>
                        @foreach (var circuitProtection in DistributionBoard.AllowedCircuitProtections)
                        {
                            <option value="@circuitProtection">@circuitProtection.GetDisplayName()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=@(() => _newProject.MainDistributionBoard.CircuitProtection)/>
                </div>

                <div class="create-project-modal-field-row">
                    <div class="create-project-modal-field">
                        <label>Conductor Type <span class="red-asterisk">*</span></label>

                        <InputSelect @bind-Value="_newProject.MainDistributionBoard.ConductorTypeId">
                            @foreach (var conductorType in _conductorTypes)
                            {
                                <option value="@conductorType.Id">@conductorType.ToString()</option>
                                @* <option value="@conductorType.Name">@conductorType.Name</option> *@
                            }
                        </InputSelect>
                        <ValidationMessage For=@(() => _newProject.MainDistributionBoard.ConductorTypeId)/>
                    </div>

                    <div class="create-project-modal-field">
                        <label>Grounding <span class="red-asterisk">*</span></label>

                        <InputSelect @bind-Value="_newProject.MainDistributionBoard.GroundingId">
                            @foreach (var conductorType in _conductorTypes)
                            {
                                <option value="@conductorType.Id">@conductorType.ToString()</option>
                                @* <option value="@conductorType.Name">@conductorType.Name</option> *@
                            }
                        </InputSelect>
                        <ValidationMessage For=@(() => _newProject.MainDistributionBoard.GroundingId)/>
                    </div>
                </div>

                <div class="create-project-modal-field">
                    <label>Raceway Type <span class="red-asterisk">*</span></label>
                    <InputSelect @bind-Value=_newProject.MainDistributionBoard.RacewayType>
                        @foreach (RacewayType racewayType in Enum.GetValues(typeof(RacewayType)))
                        {
                            <option value="@racewayType">@racewayType.GetDisplayName()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=@(() => _newProject.MainDistributionBoard.RacewayType)/>
                </div>

                @if (_newProject.MainDistributionBoard is ThreePhaseDistributionBoard threePhaseDistributionBoard2)
                {
                    <div class="create-project-modal-field">
                        <label>Transformer Primary Protection <span class="red-asterisk">*</span></label>

                        <InputSelect @bind-Value="@threePhaseDistributionBoard2.TransformerPrimaryProtection" disabled>
                            @foreach (var transformerPrimaryProtection in threePhaseDistributionBoard2.GetAllowedTransformerPrimaryProtection())
                            {
                                <option value="@transformerPrimaryProtection">@transformerPrimaryProtection.GetDisplayName()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For=@(() => threePhaseDistributionBoard2.TransformerPrimaryProtection)/>
                    </div>

                    <div class="create-project-modal-field">
                        <label>Transformer Secondary Protection <span class="red-asterisk">*</span></label>

                        <InputSelect @bind-Value="@threePhaseDistributionBoard2.TransformerSecondaryProtection">
                            @foreach (var transformerSecondaryProtection in DistributionBoard.AllowedCircuitProtections)
                            {
                                <option value="@transformerSecondaryProtection">@transformerSecondaryProtection.GetDisplayName()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For=@(() => threePhaseDistributionBoard2.TransformerSecondaryProtection)/>
                    </div>
                }
            </div>

            <div class="modal-footer modal-footer-btns">
                <button
                    class="btn-text create-project-modal-cancel-btn"
                    type="button"
                    @onclick="CloseModal">
                    Cancel
                </button>

                <button
                    class="btn-text create-project-modal-create-btn btn-primary"
                    type="submit"
                    disabled="@(!_editContext.Validate() || !_editContext.IsModified())">
                    Create
                </button>
            </div>
        </EditForm>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    Project _newProject = new() { MainDistributionBoard = new SinglePhaseDistributionBoard() };
    EditContext? _editContext = null;

    List<ConductorType> _conductorTypes = [];

    protected override async Task OnInitializedAsync()
    {
        _conductorTypes = await DatabaseContext.ConductorTypes.ToListAsync();

        _newProject.MainDistributionBoard.ConductorTypeId = _conductorTypes[0].Id;
        _newProject.MainDistributionBoard.GroundingId = _conductorTypes[0].Id;

        _editContext = new EditContext(_newProject);
    }

    async Task CloseModal()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    void UpdatePhase(BoardPhase phase)
    {
        DistributionBoard updatedNewDistributionBoard;

        if (phase == BoardPhase.SinglePhase)
        {
            updatedNewDistributionBoard = new SinglePhaseDistributionBoard();
        }
        else
        {
            updatedNewDistributionBoard = new ThreePhaseDistributionBoard
            {
                ThreePhaseConfiguration = ThreePhaseConfiguration.Delta,
                TransformerPrimaryProtection = CircuitProtection.CutOutFuse,
                TransformerSecondaryProtection = CircuitProtection.MiniatureCircuitBreaker,
                LineToLineVoltage = LineToLineVoltage.Abc
            };
        }

        updatedNewDistributionBoard.Id = _newProject.MainDistributionBoard.Id;
        updatedNewDistributionBoard.BoardName = _newProject.MainDistributionBoard.BoardName;
        updatedNewDistributionBoard.Phase = phase;
        updatedNewDistributionBoard.Voltage = updatedNewDistributionBoard.GetAllowedVoltages()[0];
        updatedNewDistributionBoard.CircuitProtection = _newProject.MainDistributionBoard.CircuitProtection;
        updatedNewDistributionBoard.SetCount = _newProject.MainDistributionBoard.SetCount;
        updatedNewDistributionBoard.ConductorTypeId = _newProject.MainDistributionBoard.ConductorTypeId;
        updatedNewDistributionBoard.ConductorType = _newProject.MainDistributionBoard.ConductorType;
        updatedNewDistributionBoard.GroundingId = _newProject.MainDistributionBoard.GroundingId;
        updatedNewDistributionBoard.Grounding = _newProject.MainDistributionBoard.Grounding;
        updatedNewDistributionBoard.RacewayType = _newProject.MainDistributionBoard.RacewayType;

        _newProject.MainDistributionBoard = updatedNewDistributionBoard;
        _editContext = new EditContext(_newProject);
    }

    void UpdateThreePhaseConfiguration(ThreePhaseConfiguration newConfiguration)
    {
        ((ThreePhaseDistributionBoard)_newProject.MainDistributionBoard).ThreePhaseConfiguration = newConfiguration;

        var allowedVoltages = _newProject.MainDistributionBoard.GetAllowedVoltages();
        if (!allowedVoltages.Contains(_newProject.MainDistributionBoard.Voltage))
        {
            _newProject.MainDistributionBoard.Voltage = allowedVoltages[0];
        }

        StateHasChanged();
    }

    async Task HandleValidFormSubmit()
    {
        _newProject.DateCreated = DateTime.Now.ToDatabaseString();
        await DatabaseContext.Projects.AddAsync(_newProject);
        await DatabaseContext.SaveChangesAsync();
        await CloseModal();

        Navigation.NavigateTo($"/board/{_newProject.MainDistributionBoardId}");
    }

}