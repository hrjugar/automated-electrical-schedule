@using Microsoft.EntityFrameworkCore
@inject DatabaseContext DatabaseContext


@if (IsOpen && _editContext != null)
{
    <div class="modal-wrapper" @onclick="@CloseModal">
        <EditForm
            class="modal edit-board-modal"
            @onclick:stopPropagation="true"
            EditContext=@_editContext
            OnValidSubmit=@HandleValidFormSubmit>

            <ObjectGraphDataAnnotationsValidator/>

            <div class="modal-header">
                <h5>Edit Board</h5>
            </div>

            <div class="modal-content edit-board-modal-fields">
                <div class="edit-board-modal-field">
                    <label>Board Name <span class="red-asterisk">*</span></label>
                    <InputText class="input-primary" @bind-Value="DistributionBoard.BoardName" placeholder="Bedroom Main PB"/>
                    <ValidationMessage For=@(() => DistributionBoard.BoardName)/>
                </div>

                <div class="edit-board-modal-field">
                    <label>Phase <span class="red-asterisk">*</span></label>
                    <InputSelect @bind-Value=DistributionBoard.Phase>
                        @foreach (BoardPhase phase in Enum.GetValues(typeof(BoardPhase)))
                        {
                            <option value="@phase">@phase.GetDisplayName()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=@(() => DistributionBoard.Phase)/>
                </div>

                <div class="edit-board-modal-field">
                    <label>Voltage <span class="red-asterisk">*</span></label>
                    <InputSelect @bind-Value=DistributionBoard.Voltage>
                        @foreach (BoardVoltage voltage in Enum.GetValues(typeof(BoardVoltage)))
                        {
                            @if (DistributionBoard.Phase == BoardPhase.SinglePhase && voltage != BoardVoltage.V230)
                            {
                                continue;
                            }

                            <option value="@voltage">@voltage.GetDisplayName()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=@(() => DistributionBoard.Voltage)/>
                </div>

                <div class="edit-board-modal-field">
                    <label>Circuit Protection <span class="red-asterisk">*</span></label>
                    <InputSelect @bind-Value=DistributionBoard.CircuitProtection>
                        @foreach (var circuitProtection in DistributionBoard.AllowedCircuitProtections)
                        {
                            <option value="@circuitProtection">@circuitProtection.GetDisplayName()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=@(() => DistributionBoard.CircuitProtection)/>
                </div>

                <div class="edit-board-modal-field">
                    <label>Sets <span class="red-asterisk">*</span></label>
                    <InputNumber class="input-primary" @bind-Value="DistributionBoard.SetCount"/>
                    <ValidationMessage For=@(() => DistributionBoard.SetCount)/>
                </div>

                <div class="edit-board-modal-field-row">
                    <div class="edit-board-modal-field">
                        <label>Conductor Type <span class="red-asterisk">*</span></label>

                        <InputSelect @bind-Value="DistributionBoard.ConductorTypeId">
                            @foreach (var conductorType in _conductorTypes)
                            {
                                <option value="@conductorType.Id">@conductorType.ToString()</option>
                                @* <option value="@conductorType.Name">@conductorType.Name</option> *@
                            }
                        </InputSelect>
                        <ValidationMessage For=@(() => DistributionBoard.ConductorTypeId)/>
                    </div>

                    <div class="edit-board-modal-field">
                        <label>Grounding <span class="red-asterisk">*</span></label>

                        <InputSelect @bind-Value="DistributionBoard.GroundingId">
                            @foreach (var conductorType in _conductorTypes)
                            {
                                <option value="@conductorType.Id">@conductorType.ToString()</option>
                                @* <option value="@conductorType.Name">@conductorType.Name</option> *@
                            }
                        </InputSelect>
                        <ValidationMessage For=@(() => DistributionBoard.GroundingId)/>
                    </div>
                </div>

                <div class="edit-board-modal-field">
                    <label>Raceway Type <span class="red-asterisk">*</span></label>
                    <InputSelect @bind-Value=DistributionBoard.RacewayType>
                        @foreach (RacewayType racewayType in Enum.GetValues(typeof(RacewayType)))
                        {
                            <option value="@racewayType">@racewayType.GetDisplayName()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=@(() => DistributionBoard.RacewayType)/>
                </div>
            </div>

            <div class="modal-footer modal-footer-btns">
                <button
                    class="btn-text edit-board-modal-cancel-btn"
                    @onclick="CloseModal">
                    Cancel
                </button>

                <button
                    class="btn-text edit-board-modal-edit-btn btn-primary"
                    type="submit"
                    disabled="@(!_editContext.Validate())">
                    Edit
                </button>
            </div>
        </EditForm>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter] public DistributionBoard DistributionBoard { get; set; } = default!;
    EditContext? _editContext;

    List<ConductorType> _conductorTypes = [];

    protected override async Task OnInitializedAsync()
    {
        _conductorTypes = await DatabaseContext.ConductorTypes.ToListAsync();

        _editContext = new EditContext(DistributionBoard);
    }

    async Task CloseModal()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    async Task HandleValidFormSubmit()
    {
        DatabaseContext.Update(DistributionBoard);
        await DatabaseContext.SaveChangesAsync();
        await CloseModal();
    }

}