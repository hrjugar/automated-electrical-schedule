@inject NavigationManager Navigation
@inject DatabaseContext DatabaseContext

@if (IsOpen && _editContext != null && _newCircuit != null)
{
    <div class="modal-wrapper" @onclick="CloseModal">
    <EditForm
        class="modal modal-wide create-or-edit-circuit-modal"
        @onclick:stopPropagation="true"
        EditContext=@_editContext
        OnValidSubmit=@HandleValidFormSubmit>

    <ObjectGraphDataAnnotationsValidator/>

    <div class="modal-header">
        <h5>@(OldCircuit is null ? "Create" : "Edit") Circuit</h5>
    </div>

    @{
        var threePhaseBoard = DistributionBoard as ThreePhaseDistributionBoard;
        var isAmpereLoadExceeding = _newCircuit is LightingOutletCircuit && _newCircuit.AmpereLoad.Value > 50;
    }

    <div class="modal-content create-or-edit-circuit-modal-content">
        <div class="create-or-edit-circuit-modal-content-head">
            <div class="create-or-edit-circuit-modal-content-categories">
                <InputSelect
                    class="select-type"
                    @bind-Value:get=_newCircuit.CircuitType @bind-Value:set="UpdateCircuitType" disabled="@(OldCircuit is not null)">
                    @foreach (var circuitType in _newCircuit.AllowedCircuitTypes)
                    {
                        <option value="@circuitType">@circuitType.GetDisplayName()</option>
                    }
                </InputSelect>

                @if (threePhaseBoard != null)
                {
                    <InputSelect 
                        class="select-line-to-line" 
                        Value="_newCircuit.LineToLineVoltage"
                        ValueChanged="@((LineToLineVoltage lineToLineVoltage) => UpdateLineToLineVoltage(lineToLineVoltage))"
                        ValueExpression="@(() => _newCircuit.LineToLineVoltage)">
                        @foreach (var lineToLineVoltage in _newCircuit.AllowedLineToLineVoltages)
                        {
                            <option value="@lineToLineVoltage">@lineToLineVoltage.GetDisplayName(threePhaseBoard.ThreePhaseConfiguration)</option>
                        }
                    </InputSelect>
                }
            </div>
            
            <div class="create-or-edit-circuit-modal-content-buttons">
                @if (_newCircuit.SetCount > 1)
                {
                    <button
                        type="button"
                        class="btn-text btn-secondary"
                        @onclick="ResetSetCount">
                        Reset Sets
                    </button>
                }
            </div>
        </div>
        
        @if (_newCircuit.ConductorSize.ErrorType == CalculationErrorType.NoFittingAmpereTripForConductorSize || 
             _newCircuit.GroundingSize.ErrorType == CalculationErrorType.NoFittingAmpereTripForGroundingSize)
        {
            <FormWarning
                WarningMessage="There is no possible conductor/grounding size that can accommodate the ampere trip. Adjust the number of sets to fix this." 
                WarningAction="@(() => _newCircuit.AdjustSetCountForSizes())"
                WarningActionText="Adjust Number of Sets"/>
        }
        
        @if (_newCircuit.RacewaySize.ErrorType == CalculationErrorType.NoFittingRacewaySize)
        {
            <FormWarning 
                WarningMessage="There is no possible raceway size that can accommodate the number of wires. Converting the raceway wire type to Cable Tray is recommended."
                WarningAction="@(() => ConvertToCableTray())"
                WarningActionText="Convert to Cable Tray"/>
        }

        <div class="create-or-edit-circuit-modal-content-main">
            <div class="create-or-edit-circuit-modal-content-fields">
                <div class="create-or-edit-circuit-modal-field">
                    <label>Description <span class="red-asterisk">*</span></label>
                    <InputText class="input-primary" @bind-Value="_newCircuit.Description" placeholder="Description"/>
                    <ValidationMessage For=@(() => _newCircuit.Description)/>
                </div>

                @switch (_newCircuit)
                {
                    case LightingOutletCircuit lightingOutletCircuit:
                        <div class="create-or-edit-circuit-modal-field">
                            <label>Wattage per fixture (W) <span class="red-asterisk">*</span></label>
                            <InputNumber class="input-primary" @bind-Value="lightingOutletCircuit.WattagePerFixture"/>
                            <ValidationMessage For=@(() => lightingOutletCircuit.WattagePerFixture)/>
                        </div>

                        break;
                    case MotorOutletCircuit motorOutletCircuit:
                        <div class="create-or-edit-circuit-modal-field">
                            <label>Motor Type <span class="red-asterisk">*</span></label>
                            <InputSelect
                                Value="motorOutletCircuit.MotorType"
                                ValueChanged="@((MotorType motorType) => UpdateMotorType(motorType))"
                                ValueExpression="@(() => motorOutletCircuit.MotorType)">
                                @foreach (var motorType in motorOutletCircuit.AllowedMotorTypes)
                                {
                                    <option value="@motorType">@motorType.GetDisplayName()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => motorOutletCircuit.MotorType)/>
                        </div>

                        <div class="create-or-edit-circuit-modal-field">
                            <label>Horsepower <span class="red-asterisk">*</span></label>
                            <InputSelect @bind-Value="motorOutletCircuit.Horsepower">
                                @foreach (var horsepowerValue in motorOutletCircuit.AllowedHorsepowerValues)
                                {
                                    <option value="@horsepowerValue">@horsepowerValue.ToHorsepowerFractionalString()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => motorOutletCircuit.Horsepower)/>
                        </div>

                        break;
                    case ConvenienceOutletCircuit convenienceOutletCircuit:
                        <div class="create-or-edit-circuit-modal-field">
                            <label>Outlet Type <span class="red-asterisk">*</span></label>
                            <InputSelect @bind-Value="convenienceOutletCircuit.OutletType">
                                @foreach (OutletType outletType in Enum.GetValues(typeof(OutletType)))
                                {
                                    <option value="@outletType">@outletType.GetDisplayName()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => convenienceOutletCircuit.OutletType)/>
                        </div>

                        break;
                    case ApplianceEquipmentOutletCircuit applianceEquipmentOutletCircuit:
                        <div class="create-or-edit-circuit-modal-field">
                            <label>Wattage <span class="red-asterisk">*</span></label>
                            <InputNumber class="input-primary" @bind-Value="applianceEquipmentOutletCircuit.Wattage"/>
                            <ValidationMessage For=@(() => applianceEquipmentOutletCircuit.Wattage)/>
                        </div>

                        break;
                }

                <div class="create-or-edit-circuit-modal-field">
                    <label>Quantity <span class="red-asterisk">*</span></label>
                    <InputNumber class="input-primary" @bind-Value="_newCircuit.Quantity" disabled="@(_newCircuit is MotorOutletCircuit)"/>
                    <ValidationMessage For=@(() => _newCircuit.Quantity)/>
                </div>

                <div class="create-or-edit-circuit-modal-field">
                    <label>Wire Length (m) <span class="red-asterisk">*</span></label>
                    <InputNumber class="input-primary" @bind-Value="_newCircuit.WireLength"/>
                    <ValidationMessage For=@(() => _newCircuit.WireLength)/>
                </div>

                <div class="create-or-edit-circuit-modal-field">
                    <label>Demand Factor (%) <span class="red-asterisk">*</span></label>
                    <InputNumber class="input-primary" @bind-Value="_newCircuit.DemandFactor" disabled="@(_newCircuit is MotorOutletCircuit)"/>
                    <ValidationMessage For=@(() => _newCircuit.DemandFactor)/>
                </div>

                <div class="create-or-edit-circuit-modal-field">
                    <label>Circuit Protection <span class="red-asterisk">*</span></label>
                    <InputSelect @bind-Value=_newCircuit.CircuitProtection>
                        @foreach (var circuitProtection in _newCircuit.AllowedCircuitProtections)
                        {
                            <option value="@circuitProtection">@circuitProtection.GetDisplayName()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=@(() => _newCircuit.CircuitProtection)/>
                </div>
                
                <div class="create-or-edit-circuit-modal-field-row">
                    <div class="create-or-edit-circuit-modal-field">
                        <label>Conductor Type <span class="red-asterisk">*</span></label>

                        <InputSelect @bind-Value="_newCircuit.ConductorTypeId">
                            @foreach (var conductorType in ConductorType.All)
                            {
                                <option value="@conductorType.Id">@conductorType.ToString()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For=@(() => _newCircuit.ConductorTypeId)/>
                    </div>

                    <div class="create-or-edit-circuit-modal-field">
                        <label>Grounding <span class="red-asterisk">*</span></label>

                        <InputSelect
                            @bind-Value="@_newCircuit.GroundingId">
                            @foreach (var grounding in ConductorType.All)
                            {
                                <option value="@grounding.Id">@grounding.ToString()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For=@(() => _newCircuit.GroundingId)/>
                    </div>
                </div>

                <div class="create-or-edit-circuit-modal-field">
                    <label>Raceway Type <span class="red-asterisk">*</span></label>
                    <InputSelect @bind-Value=_newCircuit.RacewayType>
                        @foreach (RacewayType racewayType in Enum.GetValues(typeof(RacewayType)))
                        {
                            <option value="@racewayType">@racewayType.GetDisplayName()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=@(() => _newCircuit.RacewayType)/>
                </div>
            </div>

            <div class="create-or-edit-circuit-modal-content-values">
                <div class="create-or-edit-circuit-modal-content-value">
                    <label>Sets</label>
                    <p>@(_newCircuit.SetCount)</p>
                </div>

                <div class="create-or-edit-circuit-modal-content-value">
                    <label>Volt Amps</label>
                    <p>@(_newCircuit.VoltAmpere)</p>
                </div>

                <div class="create-or-edit-circuit-modal-content-value">
                    <label>Ampere Load</label>
                    <p class="@(_newCircuit.AmpereLoad.HasError || isAmpereLoadExceeding ? "item-error" : "")">
                        @(_newCircuit.AmpereLoad.HasError ? _newCircuit.AmpereLoad.ErrorMessage : Math.Round(_newCircuit.AmpereLoad.Value, 4)) @(isAmpereLoadExceeding ? "(Cannot be >50)" : "")
                    </p>
                </div>

                <div class="create-or-edit-circuit-modal-content-value">
                    <label>Ampere Trip</label>
                    <p class="@(_newCircuit.AmpereTrip.HasError ? "item-error" : "")">@(_newCircuit.AmpereTrip)</p>
                </div>

                <div class="create-or-edit-circuit-modal-content-value">
                    <label>Ampere Frame</label>
                    <p class="@(_newCircuit.AmpereFrame.HasError ? "item-error" : "")">@(_newCircuit.AmpereFrame)</p>
                </div>

                <div class="create-or-edit-circuit-modal-content-value">
                    <label>R</label>
                    <p class="@(_newCircuit.R.HasError ? "item-error" : "")">@(_newCircuit.R)</p>
                </div>

                <div class="create-or-edit-circuit-modal-content-value">
                    <label>X</label>
                    <p class="@(_newCircuit.X.HasError ? "item-error" : "")">@(_newCircuit.X)</p>
                </div>

                <div class="create-or-edit-circuit-modal-content-value">
                    <label>Voltage Drop</label>
                    <p class="@(_newCircuit.VoltageDrop.HasError ? "item-error" : "")">@(_newCircuit.VoltageDrop.HasError ? _newCircuit.VoltageDrop.ErrorMessage : Math.Round(_newCircuit.VoltageDrop.Value, 4).ToPercentageString())</p>
                </div>

                <div class="create-or-edit-circuit-modal-content-value">
                    <label>Conductor Size</label>
                    <p class="@(_newCircuit.ConductorSize.HasError ? "item-error" : "")">@(_newCircuit.ConductorSize)</p>
                </div>

                <div class="create-or-edit-circuit-modal-content-value">
                    <label>Ground Size</label>
                    <p class="@(_newCircuit.GroundingSize.HasError ? "item-error" : "")">@(_newCircuit.GroundingSize)</p>
                </div>

                <div class="create-or-edit-circuit-modal-content-value">
                    <label>Raceway Size</label>
                    <p class="@(_newCircuit.RacewaySize.HasError ? "item-error" : "")">@(_newCircuit.RacewaySize)</p>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-footer modal-footer-btns">
        <button
            class="btn-text create-or-edit-circuit-modal-cancel-btn"
            type="button"
            @onclick="CloseModal">
            Cancel
        </button>

        <button
            class="btn-text create-or-edit-circuit-modal-create-btn btn-primary"
            type="submit"
            disabled="@(!_editContext.Validate() || !_editContext.IsModified())">
            @(OldCircuit == null ? "Create" : "Edit")
        </button>
    </div>
    </EditForm>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter] public DistributionBoard DistributionBoard { get; set; } = default!;

    [Parameter] public Circuit? OldCircuit { get; set; }

    [Parameter] public EventCallback OnCircuitCreateOrEdit { get; set; }

    EditContext? _editContext;

    Circuit? _newCircuit;

    protected override void OnInitialized()
    {
        if (OldCircuit != null)
        {
            _newCircuit = OldCircuit.Clone();
        }
        else
        {
            var allowedCircuitTypes = Circuit.GetAllowedCircuitTypesStatic(DistributionBoard.Voltage);
            if (allowedCircuitTypes.Contains(CircuitType.LightingOutlet))
            {
                _newCircuit = new LightingOutletCircuit
                {
                    CircuitType = CircuitType.LightingOutlet
                };
            } else if (allowedCircuitTypes.Contains(CircuitType.MotorOutlet))
            {
                _newCircuit = new MotorOutletCircuit
                {
                    CircuitType = CircuitType.MotorOutlet,
                };
            } else if (allowedCircuitTypes.Contains(CircuitType.ConvenienceOutlet))
            {
                _newCircuit = new ConvenienceOutletCircuit
                {
                    CircuitType = CircuitType.ConvenienceOutlet
                };
            }
            else
            {
                _newCircuit = new ApplianceEquipmentOutletCircuit
                {
                    CircuitType = CircuitType.ApplianceEquipmentOutlet
                };
            }

            _newCircuit.ParentDistributionBoard = DistributionBoard;
            _newCircuit.ConductorTypeId = ConductorType.All[0].Id;
            _newCircuit.GroundingId = ConductorType.All[0].Id;

            if (_newCircuit.ParentDistributionBoard is ThreePhaseDistributionBoard)
            {
                _newCircuit.LineToLineVoltage = Circuit.GetAllowedLineToLineVoltagesStatic(
                    _newCircuit.ParentDistributionBoard, 
                    _newCircuit.CircuitType
                )[0];
            }

            if (_newCircuit is MotorOutletCircuit motorOutletCircuit)
            {
                var initialMotorType = MotorOutletCircuit.GetAllowedMotorTypesStatic(
                    DistributionBoard,
                    _newCircuit.LineToLineVoltage
                )[0];

                var initialHorsepower = MotorOutletCircuit.GetAllowedHorsepowerValuesStatic(
                    initialMotorType,
                    _newCircuit.LineToLineVoltage
                )[0];
                
                motorOutletCircuit.MotorType = initialMotorType;
                motorOutletCircuit.Horsepower = initialHorsepower;
                motorOutletCircuit.CircuitProtection = motorOutletCircuit.AllowedCircuitProtections[0];
            }
        }

        _editContext = new EditContext(_newCircuit);
    }

    async Task CloseModal()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    void ResetSetCount()
    {
        _newCircuit!.SetCount = 1;
        StateHasChanged();
    }

    void UpdateCircuitType(CircuitType circuitType)
    {
        Circuit updatedNewCircuit;
        var allowedLineToLineVoltages = Circuit.GetAllowedLineToLineVoltagesStatic(
            _newCircuit!.ParentDistributionBoard,
            circuitType
        );

        LineToLineVoltage updatedNewLineToLineVoltage;
        if (allowedLineToLineVoltages.Count > 0)
        {
            if (_newCircuit.LineToLineVoltage is not LineToLineVoltage.None && allowedLineToLineVoltages.Contains(_newCircuit.LineToLineVoltage))
            {
                updatedNewLineToLineVoltage = _newCircuit.LineToLineVoltage;
            }
            else
            {
                updatedNewLineToLineVoltage = allowedLineToLineVoltages[0];
            }
        }
        else
        {
            updatedNewLineToLineVoltage = LineToLineVoltage.None;
        }

        switch (circuitType)
        {
            case CircuitType.LightingOutlet:
                updatedNewCircuit = new LightingOutletCircuit();
                break;
            default:
            case CircuitType.MotorOutlet:
                var initialMotorType = MotorOutletCircuit.GetAllowedMotorTypesStatic(
                    _newCircuit!.ParentDistributionBoard,
                    updatedNewLineToLineVoltage
                )[0];

                var initialHorsepower = MotorOutletCircuit.GetAllowedHorsepowerValuesStatic(
                    initialMotorType,
                    updatedNewLineToLineVoltage
                )[0];
                
                updatedNewCircuit = new MotorOutletCircuit
                {
                    MotorType = initialMotorType,
                    Horsepower = initialHorsepower
                };
                
                updatedNewCircuit.CircuitProtection = updatedNewCircuit.AllowedCircuitProtections[0];
                break;
            case CircuitType.ConvenienceOutlet:
                updatedNewCircuit = new ConvenienceOutletCircuit();
                break;
            case CircuitType.ApplianceEquipmentOutlet:
                updatedNewCircuit = new ApplianceEquipmentOutletCircuit();
                break;
        }

        updatedNewCircuit.Id = _newCircuit!.Id;
        updatedNewCircuit.CircuitType = circuitType;
        updatedNewCircuit.ParentDistributionBoardId = _newCircuit!.ParentDistributionBoardId;
        updatedNewCircuit.ParentDistributionBoard = _newCircuit!.ParentDistributionBoard;
        updatedNewCircuit.Description = _newCircuit!.Description;
        updatedNewCircuit.Quantity = updatedNewCircuit is MotorOutletCircuit ? 1 : _newCircuit.Quantity;
        updatedNewCircuit.WireLength = _newCircuit.WireLength;
        updatedNewCircuit.DemandFactor = updatedNewCircuit is MotorOutletCircuit ? 100 : _newCircuit.DemandFactor;

        updatedNewCircuit.LineToLineVoltage = updatedNewLineToLineVoltage;

        updatedNewCircuit.CircuitProtection =
            updatedNewCircuit.AllowedCircuitProtections.Contains(_newCircuit.CircuitProtection) ? _newCircuit.CircuitProtection : updatedNewCircuit.AllowedCircuitProtections[0];

        updatedNewCircuit.SetCount = _newCircuit.SetCount;
        updatedNewCircuit.ConductorTypeId = _newCircuit.ConductorTypeId;
        updatedNewCircuit.GroundingId = _newCircuit.GroundingId;
        updatedNewCircuit.RacewayType = _newCircuit.RacewayType;


        _newCircuit = updatedNewCircuit;
        _editContext = new EditContext(_newCircuit);
    }

    void UpdateLineToLineVoltage(LineToLineVoltage lineToLineVoltage)
    {
        _newCircuit!.LineToLineVoltage = lineToLineVoltage;

        if (_newCircuit is MotorOutletCircuit motorOutletCircuit)
        {
            var newMotorType = MotorOutletCircuit.GetAllowedMotorTypesStatic(
                _newCircuit.ParentDistributionBoard,
                lineToLineVoltage
            )[0];
            
            motorOutletCircuit.MotorType = newMotorType;
            
            var allowedHorsepowerValues = MotorOutletCircuit.GetAllowedHorsepowerValuesStatic(
                newMotorType,
                lineToLineVoltage
            );
            
            if (!allowedHorsepowerValues.Any(hp => hp.IsRoughlyEqualTo(motorOutletCircuit.Horsepower)))
            {
                motorOutletCircuit.Horsepower = allowedHorsepowerValues[0];
            }
        }
        
        StateHasChanged();
    }

    void ConvertToCableTray()
    {
        _newCircuit!.RacewayType = RacewayType.CableTray;
        StateHasChanged();
    }
    
    void UpdateMotorType(MotorType newMotorType)
    {
        var motorOutletCircuit = _newCircuit as MotorOutletCircuit;
        motorOutletCircuit!.MotorType = newMotorType;

        var allowedHorsepowerValues = motorOutletCircuit.AllowedHorsepowerValues;

        if (!allowedHorsepowerValues.Any(hp => hp.IsRoughlyEqualTo(motorOutletCircuit.Horsepower)))
        {
            motorOutletCircuit.Horsepower = allowedHorsepowerValues[0];
        }

        StateHasChanged();
    }

    // void UpdateLineToLineVoltage(LineToLineVoltage lineToLineVoltage)
    // {
    //     _newCircuit!.LineToLineVoltage = lineToLineVoltage;
    //
    //     if (_newCircuit is MotorOutletCircuit motorOutletCircuit)
    //     {
    //         if (!motorOutletCircuit.AllowedMotorTypes.Contains(motorOutletCircuit.MotorType))
    //         {
    //             motorOutletCircuit.MotorType = motorOutletCircuit.AllowedMotorTypes[0];
    //         }
    //     }
    //     
    //     StateHasChanged();
    // }

    async Task HandleValidFormSubmit()
    {
        if (OldCircuit is null)
        {
            await DatabaseContext.Circuits.AddAsync(_newCircuit!);
        }
        else
        {
            DatabaseContext.Entry(OldCircuit).CurrentValues.SetValues(_newCircuit!);
            DatabaseContext.Update(OldCircuit);
        }

        await DatabaseContext.SaveChangesAsync();
        await CloseModal();
        await OnCircuitCreateOrEdit.InvokeAsync();
    }

}