@inject NavigationManager Navigation
@inject DatabaseContext DatabaseContext
@inject IJSRuntime JsRuntime

@if (IsOpen && _editContext != null && _newCircuit != null)
{
    <div class="modal-wrapper" @onclick="CloseModal">
        <EditForm
            class="modal modal-wide create-or-edit-circuit-modal"
            @onclick:stopPropagation="true"
            EditContext=@_editContext
            OnValidSubmit=@HandleValidFormSubmit>

            <ObjectGraphDataAnnotationsValidator/>

            <div class="modal-header">
                <h5>@(OldCircuit is null ? "Create" : "Edit") Circuit</h5>
            </div>

            @{
                var threePhaseBoard = DistributionBoard as ThreePhaseDistributionBoard;
                var fixtureCircuit = _newCircuit as FixtureCircuit;
                var applianceCircuit = _newCircuit as ApplianceEquipmentOutletCircuit;
                var convenienceCircuit = _newCircuit as ConvenienceOutletCircuit;
                var spaceCircuit = _newCircuit as SpaceCircuit;
                var nonSpaceCircuit = _newCircuit as NonSpaceCircuit;
                var spareCircuit = _newCircuit as SpareCircuit;
                var nonSpareCircuit = _newCircuit as NonSpareCircuit;
            }

            
        <div class="modal-content create-or-edit-circuit-modal-content">
            
            <ValidationSummary/>
            
            <div class="create-or-edit-circuit-modal-content-head">
                <div class="create-or-edit-circuit-modal-content-categories">
                    <InputSelect
                        class="select-type"
                        @bind-Value:get=_newCircuit.CircuitType @bind-Value:set="UpdateCircuitType" disabled="@(OldCircuit is not null)">
                        @foreach (var circuitType in _newCircuit.AllowedCircuitTypes)
                        {
                            <option value="@circuitType">@circuitType.GetDisplayName()</option>
                        }
                    </InputSelect>

                    @if (threePhaseBoard is not null && !_newCircuit.AllowedLineToLineVoltages.All(new List<LineToLineVoltage> { LineToLineVoltage.None }.Contains))
                    {
                        <InputSelect
                            class="select-line-to-line"
                            Value="_newCircuit.LineToLineVoltage"
                            ValueChanged="@((LineToLineVoltage lineToLineVoltage) => UpdateLineToLineVoltage(lineToLineVoltage))"
                            ValueExpression="@(() => _newCircuit.LineToLineVoltage)">
                            @foreach (var lineToLineVoltage in _newCircuit.AllowedLineToLineVoltages)
                            {
                                <option value="@lineToLineVoltage">@lineToLineVoltage.GetDisplayName(threePhaseBoard.ThreePhaseConfiguration)</option>
                            }
                        </InputSelect>
                    }
                </div>

                <div class="create-or-edit-circuit-modal-content-buttons">
                    @if (nonSpaceCircuit?.SetCount > 1)
                    {
                        <button
                            type="button"
                            class="btn-text btn-secondary"
                            @onclick="ResetSetCount">
                            Reset Sets
                        </button>
                    }
                </div>
            </div>

            @if (
                nonSpaceCircuit?.ConductorSize.ErrorType == CalculationErrorType.NoFittingAmpereTripForConductorSize ||
                nonSpaceCircuit?.GroundingSize.ErrorType == CalculationErrorType.NoFittingAmpereTripForGroundingSize
            )
            {
                <FormWarning
                    WarningMessage="There is no possible conductor/grounding size that can accommodate the ampere trip. Adjust the number of sets to fix this."
                    WarningAction="@(() => nonSpaceCircuit.AdjustSetCountForSizes())"
                    WarningActionText="Adjust Number of Sets"/>
            }

            @if (nonSpaceCircuit?.RacewaySize.ErrorType == CalculationErrorType.NoFittingRacewaySize)
            {
                <FormWarning
                    WarningMessage="There is no possible raceway size that can accommodate the number of wires. Converting the raceway wire type to Cable Tray is recommended."
                    WarningAction="@(() => ConvertToCableTray())"
                    WarningActionText="Convert to Cable Tray"/>
            }

            @if (nonSpaceCircuit is not null)
            {
                <div class="create-or-edit-circuit-modal-content-main">
                    <div class="create-or-edit-circuit-modal-content-fields">
                        @if (fixtureCircuit is not null && !(applianceCircuit is not null && applianceCircuit.ApplianceType == ApplianceType.Dryer))
                        {
                            <div class="create-or-edit-circuit-modal-checkbox">
                                <InputCheckbox
                                    @bind-Value="@fixtureCircuit.IsItemized"
                                    @bind-Value:after="ToggleIsItemized"
                                    disabled="@(fixtureCircuit.Fixtures.Count > 1)"/>
                                <label>Itemized</label>
                            </div>
                        }
                        
                        @if (_newCircuit is IDescribed describedCircuit)
                        {
                            <div class="create-or-edit-circuit-modal-field">
                                <label class="required">Description</label>
                                <InputText class="input-primary" @bind-Value="describedCircuit.Description" placeholder="Description"/>
                                <ValidationMessage For=@(() => describedCircuit.Description)/>
                            </div>
                        }


                        @switch (_newCircuit)
                        {
                            case MotorOutletCircuit motorOutletCircuit:
                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="required">Motor Type</label>
                                    <InputSelect
                                        Value="motorOutletCircuit.MotorType"
                                        ValueChanged="@((MotorType motorType) => UpdateMotorType(motorType))"
                                        ValueExpression="@(() => motorOutletCircuit.MotorType)">
                                        @foreach (var motorType in motorOutletCircuit.AllowedMotorTypes)
                                        {
                                            <option value="@motorType">@motorType.GetDisplayName()</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For=@(() => motorOutletCircuit.MotorType)/>
                                </div>
                                
                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="required">Application</label>
                                    <InputSelect @bind-Value="motorOutletCircuit.MotorApplication">
                                        @foreach (var motorApplication in motorOutletCircuit.AllowedMotorApplications)
                                        {
                                            <option value="@motorApplication">@motorApplication.GetDisplayName()</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For=@(() => motorOutletCircuit.MotorApplication)/>
                                </div>

                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="required">Horsepower</label>
                                    <InputSelect @bind-Value="motorOutletCircuit.Horsepower" @key="motorOutletCircuit.AllowedHorsepowerValues">
                                        @foreach (var horsepowerValue in motorOutletCircuit.AllowedHorsepowerValues)
                                        {
                                            <option value="@horsepowerValue">@horsepowerValue</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For=@(() => motorOutletCircuit.Horsepower)/>
                                </div>

                                break;
                            case ConvenienceOutletCircuit convenienceOutletCircuit:
                                <CreateOrEditCircuitModalConvenienceYokes
                                    Circuit="convenienceOutletCircuit"
                                    OnCircuitChange="StateHasChanged"/>

                                break;
                            case ApplianceEquipmentOutletCircuit applianceEquipmentOutletCircuit:
                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="required">Appliance Type</label>
                                    <InputSelect @bind-Value="applianceEquipmentOutletCircuit.ApplianceType">
                                        @foreach (ApplianceType applianceType in applianceEquipmentOutletCircuit.AllowedApplianceTypes)
                                        {
                                            <option value="@applianceType">@applianceType.GetDisplayName()</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For=@(() => applianceEquipmentOutletCircuit.ApplianceType)/>
                                </div>

                                break;
                            case SpareCircuit:
                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="required">Volt Ampere</label>
                                    <InputNumber class="input-primary" @bind-Value="@spareCircuit!.VoltAmpere"/>
                                    <ValidationMessage For="@(() => spareCircuit.VoltAmpere)"/>
                                </div>
                                break;
                        }

                        @if (fixtureCircuit is not null)
                        {
                            @if (fixtureCircuit.IsItemized)
                            {
                                <CreateOrEditCircuitModalItemizedFixtures
                                    Fixtures="@fixtureCircuit.Fixtures"
                                    AddFixture="AddFixture"
                                    RemoveFixture="RemoveFixture"
                                    OnFixtureChange="StateHasChanged"/>
                            }
                            else
                            {
                                var nonItemizedFixture = fixtureCircuit.Fixtures[0];

                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="required">Wattage</label>
                                    <InputNumber class="input-primary" @bind-Value="@nonItemizedFixture.Wattage"/>
                                    <ValidationMessage For="@(() => nonItemizedFixture.Wattage)"/>
                                </div>

                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="required">Quantity</label>
                                    <InputNumber class="input-primary" @bind-Value="@nonItemizedFixture.Quantity"/>
                                    <ValidationMessage For="@(() => nonItemizedFixture.Quantity)"/>
                                </div>
                            }
                        }
                        
                        <div class="create-or-edit-circuit-modal-field">
                            <label>Wire Length (m)</label>
                            <InputNumber class="input-primary" @bind-Value="nonSpaceCircuit.WireLength"/>
                            <ValidationMessage For=@(() => nonSpaceCircuit.WireLength)/>
                        </div>
                        
                        <div class="create-or-edit-circuit-modal-field">
                            <label class="@(nonSpareCircuit is not null ? "required" : "")">Circuit Protection</label>
                            <InputSelect @bind-Value=nonSpaceCircuit.CircuitProtection>
                                @foreach (var circuitProtection in nonSpaceCircuit.AllowedCircuitProtections)
                                {
                                    <option value="@circuitProtection">@circuitProtection.GetDisplayName()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => nonSpaceCircuit.CircuitProtection)/>
                        </div>
                        
                        <div class="create-or-edit-circuit-modal-field-row">
                            <div class="create-or-edit-circuit-modal-field">
                                <label class="@(nonSpareCircuit is not null ? "required" : "")">Conductor Type</label>

                                <InputSelect @bind-Value="nonSpaceCircuit.ConductorTypeId">
                                    @if (spareCircuit is not null)
                                    {
                                        <option value="">-</option>
                                    }
                                    
                                    @foreach (var conductorType in ConductorType.All)
                                    {
                                        <option value="@conductorType.Id">@conductorType.ToString()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For=@(() => nonSpaceCircuit.ConductorTypeId)/>
                            </div>

                            <div class="create-or-edit-circuit-modal-field">
                                <label class="@(nonSpareCircuit is not null ? "required" : "")">Grounding</label>

                                <InputSelect
                                    @bind-Value="@nonSpaceCircuit.GroundingId">
                                    @if (spareCircuit is not null)
                                    {
                                        <option value="">-</option>
                                    }
                                    @foreach (var grounding in ConductorType.All)
                                    {
                                        <option value="@grounding.Id">@grounding.ToString()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For=@(() => nonSpaceCircuit.GroundingId)/>
                            </div>
                        </div>

                        <div class="create-or-edit-circuit-modal-field">
                            <label class="@(nonSpareCircuit is not null ? "required" : "")">Raceway Type</label>
                            <InputSelect @bind-Value=nonSpaceCircuit.RacewayType>
                                @foreach (RacewayType racewayType in Enum.GetValues(typeof(RacewayType)))
                                {
                                    <option value="@racewayType">@racewayType.GetDisplayName()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => nonSpaceCircuit.RacewayType)/>
                        </div>
                        
                    </div>
                    <CreateOrEditCircuitModalPreview Circuit="nonSpaceCircuit" OnCircuitChange="StateHasChanged" />
                </div>
            }
        </div>

        <div class="modal-footer modal-footer-btns">
            <button
                class="btn-text create-or-edit-circuit-modal-cancel-btn"
                type="button"
                @onclick="CloseModal">
                Cancel
            </button>

            <button
                class="btn-text create-or-edit-circuit-modal-create-btn btn-primary"
                type="submit"
                disabled="@(!_editContext.Validate() || (OldCircuit is null && nonSpaceCircuit is not null && !_editContext.IsModified()))">
                @(OldCircuit == null ? "Create" : "Edit")
            </button>
        </div>
        </EditForm>
    </div>
}

@if (_isPoleWarningModalOpen && _poleWarningCallback is not null)
{
    <PoleWarningModal @bind-IsOpen="_isPoleWarningModalOpen" OnConfirm="_poleWarningCallback"/>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter] public DistributionBoard DistributionBoard { get; set; } = default!;

    [Parameter] public Circuit? OldCircuit { get; set; }

    [Parameter] public EventCallback OnCircuitCreateOrEdit { get; set; }

    EditContext? _editContext;

    Circuit? _newCircuit;

    private bool _isPoleWarningModalOpen;
    private Func<Task>? _poleWarningCallback;

    protected override void OnInitialized()
    {
        if (OldCircuit != null)
        {
            _newCircuit = OldCircuit.Clone();
        }
        else
        {
            var allowedCircuitTypes = Circuit.GetAllowedCircuitTypesStatic(DistributionBoard.Voltage);
            var initialCircuitType = allowedCircuitTypes[0];
            
            _newCircuit = initialCircuitType switch
            {
                CircuitType.LightingOutlet => new LightingOutletCircuit(),
                CircuitType.MotorOutlet => new MotorOutletCircuit(),
                CircuitType.ConvenienceOutlet => new ConvenienceOutletCircuit(),
                CircuitType.ApplianceEquipmentOutlet => new ApplianceEquipmentOutletCircuit(),
                CircuitType.SpaceOutlet => new SpaceCircuit(),
                CircuitType.SpareOutlet or _ => new SpareCircuit()
            };

            _newCircuit.CircuitType = initialCircuitType;
            _newCircuit.ParentDistributionBoard = DistributionBoard;
            _newCircuit.LineToLineVoltage = _newCircuit.AllowedLineToLineVoltages[0];

            if (_newCircuit is NonSpaceCircuit nonSpaceCircuit)
            {
                nonSpaceCircuit.SetCount = 1;
                nonSpaceCircuit.CircuitProtection = nonSpaceCircuit.AllowedCircuitProtections[0];
                
                if (nonSpaceCircuit is SpareCircuit spareCircuit)
                {
                    spareCircuit.ConductorTypeId = string.Empty;
                    spareCircuit.GroundingId = string.Empty;
                    spareCircuit.RacewayType = RacewayType.None;
                }
                else
                {
                    nonSpaceCircuit.ConductorTypeId = ConductorType.All[0].Id;
                    nonSpaceCircuit.GroundingId = ConductorType.All[0].Id;
                    nonSpaceCircuit.RacewayType = RacewayType.Pvc;
                }
            }

            if (_newCircuit is MotorOutletCircuit motorOutletCircuit)
            {
                motorOutletCircuit.MotorType = motorOutletCircuit.AllowedMotorTypes[0];
                motorOutletCircuit.MotorApplication = motorOutletCircuit.AllowedMotorApplications[0];
                motorOutletCircuit.Horsepower = motorOutletCircuit.AllowedHorsepowerValues[0];
            }

            if (_newCircuit is FixtureCircuit newFixtureCircuit)
            {
                newFixtureCircuit.Fixtures.Add(new Fixture { Quantity = 1, Wattage = 0 });
            }
        }

        _editContext = new EditContext(_newCircuit);
        _editContext.OnFieldChanged += OnFieldChanged;
        StateHasChanged();
    }
    
    void OpenPoleWarningModal()
    {
        _isPoleWarningModalOpen = true;
    }

    async Task CloseModal()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }
    
    void OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (_newCircuit is IElectricalComponent electricalComponent)
        {
            electricalComponent.UpdateVoltageDropCorrectionConductorSize();
        }
    }

    void ResetSetCount()
    {
        if (_newCircuit is not NonSpaceCircuit nonSpaceCircuit) return;
        
        nonSpaceCircuit.SetCount = 1;
        StateHasChanged();
    }

    void UpdateCircuitType(CircuitType circuitType)
    {
        Circuit updatedCircuit = circuitType switch
        {
            CircuitType.LightingOutlet => new LightingOutletCircuit(),
            CircuitType.MotorOutlet => new MotorOutletCircuit(),
            CircuitType.ConvenienceOutlet => new ConvenienceOutletCircuit(),
            CircuitType.ApplianceEquipmentOutlet => new ApplianceEquipmentOutletCircuit(),
            CircuitType.SpaceOutlet => new SpaceCircuit(),
            CircuitType.SpareOutlet or _ => new SpareCircuit()
        };
        
        updatedCircuit.Id = _newCircuit!.Id;
        updatedCircuit.CircuitType = circuitType;
        updatedCircuit.ParentDistributionBoardId = _newCircuit!.ParentDistributionBoardId;
        updatedCircuit.ParentDistributionBoard = _newCircuit!.ParentDistributionBoard;
        
        updatedCircuit.LineToLineVoltage = updatedCircuit.AllowedLineToLineVoltages.Contains(_newCircuit.LineToLineVoltage)
            ? _newCircuit.LineToLineVoltage
            : updatedCircuit.AllowedLineToLineVoltages[0];
        
        if (_newCircuit is IDescribed newDescribedCircuit && updatedCircuit is IDescribed updatedDescribedCircuit)
        {
            updatedDescribedCircuit.Description = newDescribedCircuit.Description;
        }

        if (_newCircuit is NonSpaceCircuit newNonSpaceCircuit && updatedCircuit is NonSpaceCircuit updatedNonSpaceCircuit)
        {
            updatedNonSpaceCircuit.CircuitProtection = 
                updatedNonSpaceCircuit.AllowedCircuitProtections.Contains(newNonSpaceCircuit.CircuitProtection)
                    ? newNonSpaceCircuit.CircuitProtection
                    : updatedNonSpaceCircuit.AllowedCircuitProtections[0];
        
            updatedNonSpaceCircuit.WireLength = newNonSpaceCircuit.WireLength;
        
            updatedNonSpaceCircuit.SetCount = newNonSpaceCircuit.SetCount;
        
            updatedNonSpaceCircuit.ConductorTypeId = 
                updatedNonSpaceCircuit is NonSpareCircuit && newNonSpaceCircuit.ConductorTypeId == string.Empty
                    ? string.Empty
                    : newNonSpaceCircuit.ConductorTypeId;
        
            updatedNonSpaceCircuit.GroundingId = 
                updatedNonSpaceCircuit is NonSpareCircuit && newNonSpaceCircuit.GroundingId == string.Empty
                    ? string.Empty
                    : newNonSpaceCircuit.GroundingId;
        
            updatedNonSpaceCircuit.RacewayType = 
                updatedNonSpaceCircuit.AllowedRacewayTypes.Contains(newNonSpaceCircuit.RacewayType)
                    ? newNonSpaceCircuit.RacewayType
                    : updatedNonSpaceCircuit.AllowedRacewayTypes[0];
        }

        if (updatedCircuit is MotorOutletCircuit updatedMotorOutletCircuit)
        {
            updatedMotorOutletCircuit.MotorType = updatedMotorOutletCircuit.AllowedMotorTypes[0];
            updatedMotorOutletCircuit.MotorApplication = updatedMotorOutletCircuit.AllowedMotorApplications[0];
            updatedMotorOutletCircuit.Horsepower = updatedMotorOutletCircuit.AllowedHorsepowerValues[0];
        }
        
        if (updatedCircuit is FixtureCircuit updatedFixtureCircuit)
        {
            updatedFixtureCircuit.Fixtures.Add(new Fixture { Quantity = 1, Wattage = 0 });
        }
        
        _newCircuit = updatedCircuit;
        _editContext = new EditContext(_newCircuit);
        _editContext.OnFieldChanged += OnFieldChanged;
        StateHasChanged();
    }

    void UpdateLineToLineVoltage(LineToLineVoltage lineToLineVoltage)
    {
        _newCircuit!.LineToLineVoltage = lineToLineVoltage;

        if (_newCircuit is MotorOutletCircuit motorOutletCircuit)
        {
            motorOutletCircuit.MotorType = motorOutletCircuit.AllowedMotorTypes[0];
            motorOutletCircuit.MotorApplication = motorOutletCircuit.AllowedMotorApplications[0];
            
            if (!motorOutletCircuit.AllowedHorsepowerValues.Contains(motorOutletCircuit.Horsepower))
            {
                motorOutletCircuit.Horsepower = motorOutletCircuit.AllowedHorsepowerValues[0];
            }
        }
        
        StateHasChanged();
    }

    void ConvertToCableTray()
    {
        if (_newCircuit is not NonSpaceCircuit nonSpaceCircuit) return;
        
        nonSpaceCircuit.RacewayType = RacewayType.CableTray;
        StateHasChanged();
    }
    
    void UpdateMotorType(MotorType newMotorType)
    {
        var motorOutletCircuit = _newCircuit as MotorOutletCircuit;
        motorOutletCircuit!.MotorType = newMotorType;

        if (!motorOutletCircuit.AllowedHorsepowerValues.Contains(motorOutletCircuit.Horsepower))
        {
            motorOutletCircuit.Horsepower = motorOutletCircuit.AllowedHorsepowerValues[0];
        }

        StateHasChanged();
    }

    async Task ToggleIsItemized()
    {
        if (_newCircuit is FixtureCircuit fixtureCircuit)
        {
            var oldQuantity = fixtureCircuit.Fixtures[0].Quantity;
            var oldWattage = fixtureCircuit.Fixtures[0].Wattage;
            
            fixtureCircuit.Fixtures.Clear();
            fixtureCircuit.Fixtures.Add(new Fixture { Quantity = oldQuantity, Wattage = oldWattage });
        }
        
        StateHasChanged();
    }

    void AddFixture()
    {
        if (_newCircuit is FixtureCircuit fixtureCircuit)
        {
            fixtureCircuit.Fixtures.Add(new Fixture { Quantity = 1, Wattage = 0 });
        }
        
        StateHasChanged();
    }

    void RemoveFixture(Fixture fixture)
    {
        if (_newCircuit is FixtureCircuit fixtureCircuit)
        {
            fixtureCircuit.Fixtures.Remove(fixture);
        }

        if (_newCircuit is IElectricalComponent electricalComponent)
        {
            electricalComponent.UpdateVoltageDropCorrectionConductorSize();
        }
        
        StateHasChanged();
    }
    
    async Task HandleValidFormSubmit()
    {
        if (OldCircuit is null)
        {
            var createCircuitCallback = async () =>
            {
                _newCircuit!.Order = DistributionBoard.LastOrder + 1;
                DatabaseContext.Circuits.Add(_newCircuit!);
                await DatabaseContext.SaveChangesAsync();
                await CloseModal();
                await OnCircuitCreateOrEdit.InvokeAsync();
            };

            if (
                _newCircuit is NonSpaceCircuit nonSpaceCircuit && 
                DistributionBoard.TotalChildPoles + nonSpaceCircuit.Pole > DistributionBoard.RecommendedTotalChildPoles)
            {
                _poleWarningCallback = createCircuitCallback;
                OpenPoleWarningModal();
            }
            else
            {
                await createCircuitCallback();
            }
        }
        else
        {
            DatabaseContext.Entry(OldCircuit).CurrentValues.SetValues(_newCircuit!);

            if (OldCircuit is FixtureCircuit oldFixtureCircuit && _newCircuit is FixtureCircuit newFixtureCircuit)
            {
                foreach (var oldFixture in oldFixtureCircuit.Fixtures.ToList())
                {
                    if (!newFixtureCircuit.Fixtures.ToList().Any(nf => nf.Id == oldFixture.Id))
                    {
                        DatabaseContext.Remove(oldFixture);
                    }
                }
            
                foreach (var existingFixture in newFixtureCircuit.Fixtures)
                {
                    await JsRuntime.InvokeVoidAsync("console.log", existingFixture.ToString());
                    
                    if (existingFixture.Id == 0)
                    {
                        existingFixture.ParentCircuitId = newFixtureCircuit.Id;
                        DatabaseContext.Fixtures.Add(existingFixture);
                    }
                    else
                    {
                        var keptOldFixture = oldFixtureCircuit.Fixtures.First(f => f.Id == existingFixture.Id);
                        DatabaseContext.Entry(keptOldFixture).CurrentValues.SetValues(existingFixture);
                    }
                }
            }
            
            DatabaseContext.Update(OldCircuit);
            await DatabaseContext.SaveChangesAsync();
            
            await CloseModal();
            await OnCircuitCreateOrEdit.InvokeAsync();
        }
    }
}