@inject NavigationManager Navigation
@inject DatabaseContext DatabaseContext
@inject IJSRuntime JsRuntime

@if (IsOpen && _editContext != null && _newCircuit != null)
{
    <div class="modal-wrapper" @onclick="CloseModal">
        <EditForm
            class="modal modal-wide create-or-edit-circuit-modal"
            @onclick:stopPropagation="true"
            EditContext=@_editContext
            OnValidSubmit=@HandleValidFormSubmit>

            <ObjectGraphDataAnnotationsValidator/>

            <div class="modal-header">
                <h5>@(OldCircuit is null ? "Create" : "Edit") Circuit</h5>
            </div>

            @{
                var threePhaseBoard = DistributionBoard as ThreePhaseDistributionBoard;
                var fixtureCircuit = _newCircuit as FixtureCircuit;
                var applianceCircuit = _newCircuit as ApplianceEquipmentOutletCircuit;
                var convenienceCircuit = _newCircuit as ConvenienceOutletCircuit;
                var nonSpaceCircuit = _newCircuit as NonSpaceCircuit;
                var spareCircuit = _newCircuit as SpareCircuit;
                var nonSpareCircuit = _newCircuit as NonSpareCircuit;
            }

            
        <div class="modal-content create-or-edit-circuit-modal-content">
            
            <ValidationSummary/>
            
            <div class="create-or-edit-circuit-modal-content-head">
                <div class="create-or-edit-circuit-modal-content-categories">
                    <InputSelect
                        class="select-type"
                        @bind-Value:get=_newCircuit.CircuitType @bind-Value:set="UpdateCircuitType" disabled="@(OldCircuit is not null)">
                        @foreach (var circuitType in _newCircuit.AllowedCircuitTypes)
                        {
                            <option value="@circuitType">@circuitType.GetDisplayName()</option>
                        }
                    </InputSelect>

                    @if (threePhaseBoard != null && _newCircuit.AllowedLineToLineVoltages.Count > 0)
                    {
                        <InputSelect
                            class="select-line-to-line"
                            Value="_newCircuit.LineToLineVoltage"
                            ValueChanged="@((LineToLineVoltage lineToLineVoltage) => UpdateLineToLineVoltage(lineToLineVoltage))"
                            ValueExpression="@(() => _newCircuit.LineToLineVoltage)">
                            @foreach (var lineToLineVoltage in _newCircuit.AllowedLineToLineVoltages)
                            {
                                <option value="@lineToLineVoltage">@lineToLineVoltage.GetDisplayName(threePhaseBoard.ThreePhaseConfiguration)</option>
                            }
                        </InputSelect>
                    }
                </div>

                <div class="create-or-edit-circuit-modal-content-buttons">
                    @if (nonSpaceCircuit?.SetCount > 1)
                    {
                        <button
                            type="button"
                            class="btn-text btn-secondary"
                            @onclick="ResetSetCount">
                            Reset Sets
                        </button>
                    }
                </div>
            </div>

            @if (
                nonSpaceCircuit?.ConductorSize.ErrorType == CalculationErrorType.NoFittingAmpereTripForConductorSize ||
                nonSpaceCircuit?.GroundingSize.ErrorType == CalculationErrorType.NoFittingAmpereTripForGroundingSize
            )
            {
                <FormWarning
                    WarningMessage="There is no possible conductor/grounding size that can accommodate the ampere trip. Adjust the number of sets to fix this."
                    WarningAction="@(() => nonSpaceCircuit.AdjustSetCountForSizes())"
                    WarningActionText="Adjust Number of Sets"/>
            }

            @if (nonSpaceCircuit?.RacewaySize.ErrorType == CalculationErrorType.NoFittingRacewaySize)
            {
                <FormWarning
                    WarningMessage="There is no possible raceway size that can accommodate the number of wires. Converting the raceway wire type to Cable Tray is recommended."
                    WarningAction="@(() => ConvertToCableTray())"
                    WarningActionText="Convert to Cable Tray"/>
            }

            @if (nonSpaceCircuit is not null)
            {
                <div class="create-or-edit-circuit-modal-content-main">
                    <div class="create-or-edit-circuit-modal-content-fields">
                        @if (fixtureCircuit is not null && !(applianceCircuit is not null && applianceCircuit.ApplianceType == ApplianceType.Dryer))
                        {
                            <div class="create-or-edit-circuit-modal-checkbox">
                                <InputCheckbox
                                    @bind-Value="@fixtureCircuit.IsItemized"
                                    disabled="@(fixtureCircuit.Fixtures.Count > 1)"/>
                                <label>Itemized</label>
                            </div>
                        }
                        
                        @if (_newCircuit is IDescribed describedCircuit)
                        {
                            <div class="create-or-edit-circuit-modal-field">
                                <label class="required">Description</label>
                                <InputText class="input-primary" @bind-Value="describedCircuit.Description" placeholder="Description"/>
                                <ValidationMessage For=@(() => describedCircuit.Description)/>
                            </div>
                        }


                        @switch (_newCircuit)
                        {
                            case MotorOutletCircuit motorOutletCircuit:
                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="required">Motor Type</label>
                                    <InputSelect
                                        Value="motorOutletCircuit.MotorType"
                                        ValueChanged="@((MotorType motorType) => UpdateMotorType(motorType))"
                                        ValueExpression="@(() => motorOutletCircuit.MotorType)">
                                        @foreach (var motorType in motorOutletCircuit.AllowedMotorTypes)
                                        {
                                            <option value="@motorType">@motorType.GetDisplayName()</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For=@(() => motorOutletCircuit.MotorType)/>
                                </div>
                                
                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="required">Application</label>
                                    <InputSelect @bind-Value="motorOutletCircuit.MotorApplication">
                                        @foreach (var motorApplication in motorOutletCircuit.AllowedMotorApplications)
                                        {
                                            <option value="@motorApplication">@motorApplication.GetDisplayName()</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For=@(() => motorOutletCircuit.MotorApplication)/>
                                </div>

                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="required">Horsepower</label>
                                    <InputSelect @bind-Value="motorOutletCircuit.Horsepower" @key="motorOutletCircuit.AllowedHorsepowerValues">
                                        @foreach (var horsepowerValue in motorOutletCircuit.AllowedHorsepowerValues)
                                        {
                                            <option value="@horsepowerValue">@horsepowerValue</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For=@(() => motorOutletCircuit.Horsepower)/>
                                </div>

                                break;
                            case ConvenienceOutletCircuit convenienceOutletCircuit:
                                <CreateOrEditCircuitModalConvenienceYokes
                                    Circuit="convenienceOutletCircuit"
                                    OnCircuitChange="StateHasChanged"/>

                                break;
                            case ApplianceEquipmentOutletCircuit applianceEquipmentOutletCircuit:
                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="required">Appliance Type</label>
                                    <InputSelect @bind-Value="applianceEquipmentOutletCircuit.ApplianceType">
                                        @foreach (ApplianceType applianceType in applianceEquipmentOutletCircuit.AllowedApplianceTypes)
                                        {
                                            <option value="@applianceType">@applianceType.GetDisplayName()</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For=@(() => applianceEquipmentOutletCircuit.ApplianceType)/>
                                </div>

                                break;
                            case SpareCircuit:
                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="required">Volt Ampere</label>
                                    <InputNumber class="input-primary" @bind-Value="@spareCircuit!.VoltAmpere"/>
                                    <ValidationMessage For="@(() => spareCircuit.VoltAmpere)"/>
                                </div>
                                break;
                        }

                        @if (fixtureCircuit is not null)
                        {
                            @if (fixtureCircuit.IsItemized)
                            {
                                <CreateOrEditCircuitModalItemizedFixtures
                                    Fixtures="@fixtureCircuit.Fixtures"
                                    AddFixture="AddFixture"
                                    RemoveFixture="RemoveFixture"
                                    OnFixtureChange="StateHasChanged"/>
                            }
                            else
                            {
                                var nonItemizedFixture = fixtureCircuit.Fixtures[0];

                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="required">Wattage</label>
                                    <InputNumber class="input-primary" @bind-Value="@nonItemizedFixture.Wattage"/>
                                    <ValidationMessage For="@(() => nonItemizedFixture.Wattage)"/>
                                </div>

                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="required">Quantity</label>
                                    <InputNumber class="input-primary" @bind-Value="@nonItemizedFixture.Quantity"/>
                                    <ValidationMessage For="@(() => nonItemizedFixture.Quantity)"/>
                                </div>
                            }
                        }
                        
                        @if (nonSpaceCircuit is not null)
                        {
                            <div class="create-or-edit-circuit-modal-field">
                                <label class="@(nonSpareCircuit is not null ? "required" : "")">Wire Length (m)</label>
                                <InputNumber class="input-primary" @bind-Value="nonSpaceCircuit.WireLength"/>
                                <ValidationMessage For=@(() => nonSpaceCircuit.WireLength)/>
                            </div>
                            
                            <div class="create-or-edit-circuit-modal-field">
                                <label class="@(nonSpareCircuit is not null ? "required" : "")">Circuit Protection</label>
                                <InputSelect @bind-Value=nonSpaceCircuit.CircuitProtection>
                                    @foreach (var circuitProtection in nonSpaceCircuit.AllowedCircuitProtections)
                                    {
                                        <option value="@circuitProtection">@circuitProtection.GetDisplayName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For=@(() => nonSpaceCircuit.CircuitProtection)/>
                            </div>
                            
                            <div class="create-or-edit-circuit-modal-field-row">
                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="@(nonSpareCircuit is not null ? "required" : "")">Conductor Type</label>

                                    <InputSelect @bind-Value="nonSpaceCircuit.ConductorTypeId">
                                        @if (spareCircuit is not null)
                                        {
                                            <option value="">-</option>
                                        }
                                        
                                        @foreach (var conductorType in ConductorType.All)
                                        {
                                            <option value="@conductorType.Id">@conductorType.ToString()</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For=@(() => nonSpaceCircuit.ConductorTypeId)/>
                                </div>

                                <div class="create-or-edit-circuit-modal-field">
                                    <label class="@(nonSpareCircuit is not null ? "required" : "")">Grounding</label>

                                    <InputSelect
                                        @bind-Value="@nonSpaceCircuit.GroundingId">
                                        @if (spareCircuit is not null)
                                        {
                                            <option value="">-</option>
                                        }
                                        @foreach (var grounding in ConductorType.All)
                                        {
                                            <option value="@grounding.Id">@grounding.ToString()</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For=@(() => nonSpaceCircuit.GroundingId)/>
                                </div>
                            </div>

                            <div class="create-or-edit-circuit-modal-field">
                                <label class="@(nonSpareCircuit is not null ? "required" : "")">Raceway Type</label>
                                <InputSelect @bind-Value=nonSpaceCircuit.RacewayType>
                                    @foreach (RacewayType racewayType in Enum.GetValues(typeof(RacewayType)))
                                    {
                                        <option value="@racewayType">@racewayType.GetDisplayName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For=@(() => nonSpaceCircuit.RacewayType)/>
                            </div>
                        }
                        
                    </div>
                    <CreateOrEditCircuitModalPreview Circuit="nonSpaceCircuit" OnCircuitChange="StateHasChanged" />
                </div>
            }
        </div>

        <div class="modal-footer modal-footer-btns">
            <button
                class="btn-text create-or-edit-circuit-modal-cancel-btn"
                type="button"
                @onclick="CloseModal">
                Cancel
            </button>

            <button
                class="btn-text create-or-edit-circuit-modal-create-btn btn-primary"
                type="submit"
                disabled="@(!_editContext.Validate() || (OldCircuit is null && nonSpaceCircuit is not null && !_editContext.IsModified()))">
                @(OldCircuit == null ? "Create" : "Edit")
            </button>
        </div>
        </EditForm>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter] public DistributionBoard DistributionBoard { get; set; } = default!;

    [Parameter] public Circuit? OldCircuit { get; set; }

    [Parameter] public EventCallback OnCircuitCreateOrEdit { get; set; }

    EditContext? _editContext;

    Circuit? _newCircuit;

    protected override void OnInitialized()
    {
        if (OldCircuit != null)
        {
            _newCircuit = OldCircuit.Clone();
        }
        else
        {
            var allowedCircuitTypes = Circuit.GetAllowedCircuitTypesStatic(DistributionBoard.Voltage);
            if (allowedCircuitTypes.Contains(CircuitType.LightingOutlet))
            {
                _newCircuit = new LightingOutletCircuit
                {
                    CircuitType = CircuitType.LightingOutlet,
                };
            } else if (allowedCircuitTypes.Contains(CircuitType.MotorOutlet))
            {
                _newCircuit = new MotorOutletCircuit
                {
                    CircuitType = CircuitType.MotorOutlet,
                };
            } else if (allowedCircuitTypes.Contains(CircuitType.ConvenienceOutlet))
            {
                _newCircuit = new ConvenienceOutletCircuit
                {
                    CircuitType = CircuitType.ConvenienceOutlet
                };
            }
            else
            {
                _newCircuit = new ApplianceEquipmentOutletCircuit
                {
                    CircuitType = CircuitType.ApplianceEquipmentOutlet
                };
            }

            _newCircuit.ParentDistributionBoard = DistributionBoard;

            if (_newCircuit.ParentDistributionBoard is ThreePhaseDistributionBoard)
            {
                _newCircuit.LineToLineVoltage = Circuit.GetAllowedLineToLineVoltagesStatic(
                    _newCircuit.ParentDistributionBoard, 
                    _newCircuit.CircuitType
                )[0];
            }

            if (_newCircuit is NonSpaceCircuit nonSpaceCircuit)
            {
                if (nonSpaceCircuit is SpareCircuit spareCircuit)
                {
                    spareCircuit.ConductorTypeId = string.Empty;
                    spareCircuit.GroundingId = string.Empty;
                    spareCircuit.RacewayType = RacewayType.None;
                }
                else
                {
                    nonSpaceCircuit.ConductorTypeId = ConductorType.All[0].Id;
                    nonSpaceCircuit.GroundingId = ConductorType.All[0].Id;
                    nonSpaceCircuit.RacewayType = RacewayType.Pvc;
                }
            }

            if (_newCircuit is MotorOutletCircuit motorOutletCircuit)
            {
                var initialMotorType = MotorOutletCircuit.GetAllowedMotorTypesStatic(
                    DistributionBoard,
                    _newCircuit.LineToLineVoltage
                )[0];
                
                var initialMotorApplication = MotorOutletCircuit.GetAllowedMotorApplicationsStatic(
                    DistributionBoard,
                    _newCircuit.LineToLineVoltage
                )[0];

                var initialHorsepower = MotorOutletCircuit.GetAllowedHorsepowerValuesStatic(
                    initialMotorType,
                    _newCircuit.LineToLineVoltage
                )[0];
                
                motorOutletCircuit.MotorType = initialMotorType;
                motorOutletCircuit.MotorApplication = initialMotorApplication;
                motorOutletCircuit.Horsepower = initialHorsepower;
                motorOutletCircuit.CircuitProtection = motorOutletCircuit.AllowedCircuitProtections[0];
            }

            if (_newCircuit is FixtureCircuit newFixtureCircuit)
            {
                newFixtureCircuit.Fixtures.Add(new Fixture { Quantity = 1, Wattage = 0 });
            }
        }

        _editContext = new EditContext(_newCircuit);
    }

    async Task CloseModal()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    void ResetSetCount()
    {
        if (_newCircuit is not NonSpaceCircuit nonSpaceCircuit) return;
        
        nonSpaceCircuit.SetCount = 1;
        StateHasChanged();
    }

    void UpdateCircuitType(CircuitType circuitType)
    {
        Circuit updatedNewCircuit;
        var allowedLineToLineVoltages = Circuit.GetAllowedLineToLineVoltagesStatic(
            _newCircuit!.ParentDistributionBoard,
            circuitType
        );

        LineToLineVoltage updatedNewLineToLineVoltage;
        if (allowedLineToLineVoltages.Count > 0)
        {
            if (_newCircuit.LineToLineVoltage is not LineToLineVoltage.None && allowedLineToLineVoltages.Contains(_newCircuit.LineToLineVoltage))
            {
                updatedNewLineToLineVoltage = _newCircuit.LineToLineVoltage;
            }
            else
            {
                updatedNewLineToLineVoltage = allowedLineToLineVoltages[0];
            }
        }
        else
        {
            updatedNewLineToLineVoltage = LineToLineVoltage.None;
        }

        switch (circuitType)
        {
            case CircuitType.LightingOutlet:
                updatedNewCircuit = new LightingOutletCircuit();
                break;
            default:
            case CircuitType.MotorOutlet:
                var initialMotorType = MotorOutletCircuit.GetAllowedMotorTypesStatic(
                    _newCircuit!.ParentDistributionBoard,
                    updatedNewLineToLineVoltage
                )[0];

                var initialMotorApplication = MotorOutletCircuit.GetAllowedMotorApplicationsStatic(
                    _newCircuit!.ParentDistributionBoard,
                    updatedNewLineToLineVoltage
                )[0];

                var initialHorsepower = MotorOutletCircuit.GetAllowedHorsepowerValuesStatic(
                    initialMotorType,
                    updatedNewLineToLineVoltage
                )[0];
                
                updatedNewCircuit = new MotorOutletCircuit
                {
                    MotorType = initialMotorType,
                    Horsepower = initialHorsepower,
                    MotorApplication = initialMotorApplication
                };
                break;
            case CircuitType.ConvenienceOutlet:
                updatedNewCircuit = new ConvenienceOutletCircuit();
                break;
            case CircuitType.ApplianceEquipmentOutlet:
                updatedNewCircuit = new ApplianceEquipmentOutletCircuit();
                break;
            case CircuitType.SpaceOutlet:
                updatedNewCircuit = new SpaceCircuit();
                break;
            case CircuitType.SpareOutlet:
                updatedNewCircuit = new SpareCircuit();
                break;
        }

        updatedNewCircuit.Id = _newCircuit!.Id;
        updatedNewCircuit.CircuitType = circuitType;
        updatedNewCircuit.ParentDistributionBoardId = _newCircuit!.ParentDistributionBoardId;
        updatedNewCircuit.ParentDistributionBoard = _newCircuit!.ParentDistributionBoard;
        updatedNewCircuit.LineToLineVoltage = updatedNewLineToLineVoltage;
        
        
        @if (_newCircuit is IDescribed newDescribedCircuit && updatedNewCircuit is IDescribed updatedNewDescribedCircuit)
        {
            updatedNewDescribedCircuit.Description = newDescribedCircuit.Description;
        }
        
        @if (_newCircuit is NonSpaceCircuit newNonSpaceCircuit && updatedNewCircuit is NonSpaceCircuit updatedNewNonSpaceCircuit)
        {
            updatedNewNonSpaceCircuit.CircuitProtection =
                updatedNewNonSpaceCircuit.AllowedCircuitProtections.Contains(newNonSpaceCircuit.CircuitProtection) ? 
                    newNonSpaceCircuit.CircuitProtection : 
                    updatedNewCircuit.AllowedCircuitProtections[0];
            
            updatedNewNonSpaceCircuit.WireLength = 
                updatedNewNonSpaceCircuit is NonSpareCircuit && newNonSpaceCircuit.WireLength == 0 
                    ? 1 
                    : newNonSpaceCircuit.WireLength;

            updatedNewNonSpaceCircuit.SetCount =
                updatedNewNonSpaceCircuit is NonSpareCircuit && newNonSpaceCircuit.SetCount == 0
                    ? 1
                    : newNonSpaceCircuit.SetCount;

            updatedNewNonSpaceCircuit.ConductorTypeId =
                updatedNewNonSpaceCircuit is NonSpareCircuit && newNonSpaceCircuit.ConductorTypeId == string.Empty
                    ? string.Empty
                    : newNonSpaceCircuit.ConductorTypeId;
            
            updatedNewNonSpaceCircuit.GroundingId = 
                updatedNewNonSpaceCircuit is NonSpareCircuit && newNonSpaceCircuit.GroundingId == string.Empty
                    ? string.Empty
                    : newNonSpaceCircuit.GroundingId;
            
            updatedNewNonSpaceCircuit.RacewayType = 
                updatedNewNonSpaceCircuit is NonSpareCircuit && newNonSpaceCircuit.RacewayType == RacewayType.None
                    ? RacewayType.Pvc
                    : newNonSpaceCircuit.RacewayType;
        }

        if (updatedNewCircuit is FixtureCircuit updatedNewFixtureCircuit)
        {
            updatedNewFixtureCircuit.Fixtures.Add(new Fixture { Quantity = 1, Wattage = 0 });
        }
        
        _newCircuit = updatedNewCircuit;
        _editContext = new EditContext(_newCircuit);
        
        StateHasChanged();
    }

    void UpdateLineToLineVoltage(LineToLineVoltage lineToLineVoltage)
    {
        _newCircuit!.LineToLineVoltage = lineToLineVoltage;

        if (_newCircuit is MotorOutletCircuit motorOutletCircuit)
        {
            var newMotorType = MotorOutletCircuit.GetAllowedMotorTypesStatic(
                _newCircuit.ParentDistributionBoard,
                lineToLineVoltage
            )[0];
            
            motorOutletCircuit.MotorType = newMotorType;
            
            var newMotorApplication = MotorOutletCircuit.GetAllowedMotorApplicationsStatic(
                _newCircuit.ParentDistributionBoard,
                lineToLineVoltage
            )[0];
            
            motorOutletCircuit.MotorApplication = newMotorApplication;
            
            var allowedHorsepowerValues = MotorOutletCircuit.GetAllowedHorsepowerValuesStatic(
                newMotorType,
                lineToLineVoltage
            );
            
            if (!allowedHorsepowerValues.Contains(motorOutletCircuit.Horsepower))
            {
                motorOutletCircuit.Horsepower = allowedHorsepowerValues[0];
            }
        }
        
        StateHasChanged();
    }

    void ConvertToCableTray()
    {
        if (_newCircuit is not NonSpaceCircuit nonSpaceCircuit) return;
        
        nonSpaceCircuit.RacewayType = RacewayType.CableTray;
        StateHasChanged();
    }
    
    void UpdateMotorType(MotorType newMotorType)
    {
        var motorOutletCircuit = _newCircuit as MotorOutletCircuit;
        motorOutletCircuit!.MotorType = newMotorType;

        var allowedHorsepowerValues = motorOutletCircuit.AllowedHorsepowerValues;

        if (!allowedHorsepowerValues.Contains(motorOutletCircuit.Horsepower))
        {
            motorOutletCircuit.Horsepower = allowedHorsepowerValues[0];
        }

        StateHasChanged();
    }

    void AddFixture()
    {
        if (_newCircuit is FixtureCircuit fixtureCircuit)
        {
            fixtureCircuit.Fixtures.Add(new Fixture { Quantity = 1, Wattage = 0 });
        }
        
        StateHasChanged();
    }

    void RemoveFixture(Fixture fixture)
    {
        if (_newCircuit is FixtureCircuit fixtureCircuit)
        {
            fixtureCircuit.Fixtures.Remove(fixture);
        }
        
        StateHasChanged();
    }
    
    async Task HandleValidFormSubmit()
    {
        if (OldCircuit is null)
        {
            _newCircuit!.Order = DistributionBoard.LastOrder + 1;
            DatabaseContext.Circuits.Add(_newCircuit!);
            await DatabaseContext.SaveChangesAsync();
        }
        else
        {
            DatabaseContext.Entry(OldCircuit).CurrentValues.SetValues(_newCircuit!);

            if (OldCircuit is FixtureCircuit oldFixtureCircuit && _newCircuit is FixtureCircuit newFixtureCircuit)
            {
                foreach (var oldFixture in oldFixtureCircuit.Fixtures.ToList())
                {
                    if (!newFixtureCircuit.Fixtures.ToList().Any(nf => nf.Id == oldFixture.Id))
                    {
                        DatabaseContext.Remove(oldFixture);
                    }
                }
            
                foreach (var existingFixture in newFixtureCircuit.Fixtures)
                {
                    await JsRuntime.InvokeVoidAsync("console.log", existingFixture.ToString());
                    
                    if (existingFixture.Id == 0)
                    {
                        existingFixture.ParentCircuitId = newFixtureCircuit.Id;
                        DatabaseContext.Fixtures.Add(existingFixture);
                    }
                    else
                    {
                        var keptOldFixture = oldFixtureCircuit.Fixtures.First(f => f.Id == existingFixture.Id);
                        DatabaseContext.Entry(keptOldFixture).CurrentValues.SetValues(existingFixture);
                    }
                }
            }
            
            DatabaseContext.Update(OldCircuit);
            await DatabaseContext.SaveChangesAsync();
        }
        
        await CloseModal();
        await OnCircuitCreateOrEdit.InvokeAsync();
    }

}