@using Microsoft.EntityFrameworkCore
@inject DatabaseContext DatabaseContext

<h3>CreateCircuitModal</h3>

@if (IsOpen && _editContext != null && _newCircuit != null)
{
    <div class="modal-wrapper" @onclick="CloseModal">
        <EditForm
            class="modal create-project-modal"
            @onclick:stopPropagation="true"
            EditContext=@_editContext
            OnValidSubmit=@HandleValidFormSubmit>

            <ObjectGraphDataAnnotationsValidator/>

            <div class="modal-header">
                <h5>Create Circuit</h5>
            </div>

            <div class="modal-content create-circuit-modal-fields">
                <div class="create-circuit-modal-field">
                    <InputSelect @bind-Value:get=_newCircuit.CircuitType @bind-Value:set="UpdateCircuitType">
                        @foreach (CircuitType circuitType in Enum.GetValues(typeof(CircuitType)))
                        {
                            <option value="@circuitType">@circuitType.GetDisplayName()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=@(() => _newCircuit.CircuitType)/>
                </div>

                @switch (_newCircuit)
                {
                    case LightingOutletCircuit lightingOutletCircuit:
                        <div class="create-circuit-modal-field">
                            <label>Lighting Fixture Description <span class="red-asterisk">*</span></label>
                            <InputText class="input-primary" @bind-Value="lightingOutletCircuit.Description" placeholder="Lamp"/>
                            <ValidationMessage For=@(() => lightingOutletCircuit.Description)/>
                        </div>

                        <div class="create-circuit-modal-field">
                            <label>Wattage per fixture (W) <span class="red-asterisk">*</span></label>
                            <InputNumber class="input-primary" @bind-Value="lightingOutletCircuit.WattagePerFixture"/>
                            <ValidationMessage For=@(() => lightingOutletCircuit.WattagePerFixture)/>
                        </div>

                        break;
                    case MotorOutletCircuit motorOutletCircuit:
                        <div class="create-circuit-modal-field">
                            <label>Motor Description <span class="red-asterisk">*</span></label>
                            @* TODO: Update placeholder text *@
                            <InputText class="input-primary" @bind-Value="motorOutletCircuit.Description" placeholder="Motor"/>
                            <ValidationMessage For=@(() => motorOutletCircuit.Description)/>
                        </div>

                        <div class="create-circuit-modal-field">
                            <label>Motor Type <span class="red-asterisk">*</span></label>
                            <InputSelect @bind-Value="motorOutletCircuit.MotorType">
                                @foreach (MotorType motorType in Enum.GetValues(typeof(MotorType)))
                                {
                                    <option value="@motorType">@motorType.GetDisplayName()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => motorOutletCircuit.MotorType)/>
                        </div>

                        <div class="create-circuit-modal-field">
                            <label>Horsepower <span class="red-asterisk">*</span></label>
                            <InputNumber class="input-primary" @bind-Value="motorOutletCircuit.Horsepower"/>
                            <ValidationMessage For=@(() => motorOutletCircuit.Horsepower)/>
                        </div>

                        break;
                    case ConvenienceOutletCircuit convenienceOutletCircuit:
                        <div class="create-circuit-modal-field">
                            <label>Outlet Type <span class="red-asterisk">*</span></label>
                            <InputSelect @bind-Value="convenienceOutletCircuit.OutletType">
                                @foreach (OutletType outletType in Enum.GetValues(typeof(OutletType)))
                                {
                                    <option value="@outletType">@outletType.GetDisplayName()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For=@(() => convenienceOutletCircuit.OutletType)/>
                        </div>

                        break;
                    case ApplianceEquipmentOutletCircuit applianceEquipmentOutletCircuit:
                        <div class="create-circuit-modal-field">
                            <label>Appliance/Equipment Description <span class="red-asterisk">*</span></label>
                            <InputText class="input-primary" @bind-Value="applianceEquipmentOutletCircuit.Description" placeholder="Lamp"/>
                            <ValidationMessage For=@(() => applianceEquipmentOutletCircuit.Description)/>
                        </div>

                        <div class="create-circuit-modal-field">
                            <label>Wattage <span class="red-asterisk">*</span></label>
                            <InputNumber class="input-primary" @bind-Value="applianceEquipmentOutletCircuit.Wattage"/>
                            <ValidationMessage For=@(() => applianceEquipmentOutletCircuit.Wattage)/>
                        </div>

                        break;
                }

                <div class="create-circuit-modal-field">
                    <label>Quantity <span class="red-asterisk">*</span></label>
                    <InputNumber class="input-primary" @bind-Value="_newCircuit.Quantity"/>
                    <ValidationMessage For=@(() => _newCircuit.Quantity)/>
                </div>

                <div class="create-circuit-modal-field">
                    <label>Wire Length <span class="red-asterisk">*</span></label>
                    <InputNumber class="input-primary" @bind-Value="_newCircuit.WireLength"/>
                    <ValidationMessage For=@(() => _newCircuit.WireLength)/>
                </div>

                <div class="create-circuit-modal-field">
                    <label>Circuit Protection <span class="red-asterisk">*</span></label>
                    <InputSelect @bind-Value=_newCircuit.CircuitProtection>
                        @foreach (var circuitProtection in DistributionBoard.AllowedCircuitProtections)
                        {
                            <option value="@circuitProtection">@circuitProtection.GetDisplayName()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=@(() => _newCircuit.CircuitProtection)/>
                </div>

                <div class="create-circuit-modal-field">
                    <label>Sets <span class="red-asterisk">*</span></label>
                    <InputNumber class="input-primary" @bind-Value="_newCircuit.SetCount"/>
                    <ValidationMessage For=@(() => _newCircuit.SetCount)/>
                </div>

                <div class="create-circuit-modal-field-row">
                    <div class="create-circuit-modal-field">
                        <label>Conductor Type <span class="red-asterisk">*</span></label>

                        <InputSelect @bind-Value="_newCircuit.ConductorTypeId">
                            @foreach (var conductorType in _conductorTypes)
                            {
                                <option value="@conductorType.Id">@conductorType.ToString()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For=@(() => _newCircuit.ConductorTypeId)/>
                    </div>

                    <div class="create-circuit-modal-field">
                        <label>Grounding <span class="red-asterisk">*</span></label>

                        <InputSelect @bind-Value="_newCircuit.GroundingId">
                            @foreach (var conductorType in _conductorTypes)
                            {
                                <option value="@conductorType.Id">@conductorType.ToString()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For=@(() => _newCircuit.GroundingId)/>
                    </div>
                </div>

                <div class="create-circuit-modal-field">
                    <label>Raceway Type <span class="red-asterisk">*</span></label>
                    <InputSelect @bind-Value=_newCircuit.RacewayType>
                        @foreach (RacewayType racewayType in Enum.GetValues(typeof(RacewayType)))
                        {
                            <option value="@racewayType">@racewayType.GetDisplayName()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=@(() => _newCircuit.RacewayType)/>
                </div>
            </div>

            <div class="modal-footer modal-footer-btns">
                <button
                    class="btn-text create-circuit-modal-cancel-btn"
                    @onclick="CloseModal">
                    Cancel
                </button>

                <button
                    class="btn-text create-circuit-modal-create-btn btn-primary"
                    type="submit"
                    disabled="@(!_editContext.Validate() || !_editContext.IsModified())">
                    Create
                </button>
            </div>
        </EditForm>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter] public DistributionBoard DistributionBoard { get; set; } = default!;
    EditContext? _editContext;

    Circuit? _newCircuit;
    List<ConductorType> _conductorTypes = [];

    protected override async Task OnInitializedAsync()
    {
        _conductorTypes = await DatabaseContext.ConductorTypes.ToListAsync();

        _newCircuit = new LightingOutletCircuit
        {
            ParentDistributionBoard = DistributionBoard,
            ConductorTypeId = _conductorTypes[0].Id,
            GroundingId = _conductorTypes[0].Id
        };

        _editContext = new EditContext(_newCircuit);
    }

    async Task CloseModal()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    void UpdateCircuitType(CircuitType circuitType)
    {
        Circuit updatedNewCircuit;

        switch (circuitType)
        {
            case CircuitType.LightingOutlet:
                updatedNewCircuit = new LightingOutletCircuit();
                break;
            default:
            case CircuitType.MotorOutlet:
                updatedNewCircuit = new MotorOutletCircuit();
                break;
            case CircuitType.ConvenienceOutlet:
                updatedNewCircuit = new ConvenienceOutletCircuit();
                break;
            case CircuitType.ApplianceEquipmentOutlet:
                updatedNewCircuit = new ApplianceEquipmentOutletCircuit();
                break;
        }

        updatedNewCircuit.CircuitType = circuitType;
        updatedNewCircuit.ParentDistributionBoard = _newCircuit!.ParentDistributionBoard;
        updatedNewCircuit.Quantity = _newCircuit.Quantity;
        updatedNewCircuit.WireLength = _newCircuit.WireLength;
        updatedNewCircuit.CircuitProtection = _newCircuit.CircuitProtection;
        updatedNewCircuit.SetCount = _newCircuit.SetCount;
        updatedNewCircuit.ConductorTypeId = _newCircuit.ConductorTypeId;
        updatedNewCircuit.GroundingId = _newCircuit.GroundingId;
        updatedNewCircuit.RacewayType = _newCircuit.RacewayType;

        _newCircuit = updatedNewCircuit;
        _editContext = new EditContext(_newCircuit);
    }

    async Task HandleValidFormSubmit()
    {
        await DatabaseContext.Circuits.AddAsync(_newCircuit!);
        await DatabaseContext.SaveChangesAsync();
        await CloseModal();
    }

}